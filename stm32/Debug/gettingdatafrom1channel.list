
gettingdatafrom1channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e98  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080081cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002cc  24000060  0800822c  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400032c  0800822c  0002032c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013752  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002345  00000000  00000000  00033823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e78  00000000  00000000  00035b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b24  00000000  00000000  000369e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000311ec  00000000  00000000  00037504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000128f9  00000000  00000000  000686f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00147055  00000000  00000000  0007afe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004278  00000000  00000000  001c2040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001c62b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008130 	.word	0x08008130

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008130 	.word	0x08008130

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	0000      	movs	r0, r0
	...

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fd63 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f85f 	bl	800075c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069e:	f000 f8d3 	bl	8000848 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fa31 	bl	8000b08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 f9db 	bl	8000a60 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006aa:	f000 fa25 	bl	8000af8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006ae:	f000 f8fb 	bl	80008a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006b2:	f000 f971 	bl	8000998 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80006b6:	4826      	ldr	r0, [pc, #152]	; (8000750 <main+0xc0>)
 80006b8:	f001 f95a 	bl	8001970 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 80006bc:	4825      	ldr	r0, [pc, #148]	; (8000754 <main+0xc4>)
 80006be:	f001 f957 	bl	8001970 <HAL_ADC_Start>

	 	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006c2:	f04f 31ff 	mov.w	r1, #4294967295
 80006c6:	4822      	ldr	r0, [pc, #136]	; (8000750 <main+0xc0>)
 80006c8:	f001 fa0c 	bl	8001ae4 <HAL_ADC_PollForConversion>
	 	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	4820      	ldr	r0, [pc, #128]	; (8000754 <main+0xc4>)
 80006d2:	f001 fa07 	bl	8001ae4 <HAL_ADC_PollForConversion>

	 	  raw = HAL_ADC_GetValue(&hadc1);
 80006d6:	481e      	ldr	r0, [pc, #120]	; (8000750 <main+0xc0>)
 80006d8:	f001 fadc 	bl	8001c94 <HAL_ADC_GetValue>
 80006dc:	4603      	mov	r3, r0
 80006de:	83fb      	strh	r3, [r7, #30]
	 	  raw2 = HAL_ADC_GetValue(&hadc2);
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <main+0xc4>)
 80006e2:	f001 fad7 	bl	8001c94 <HAL_ADC_GetValue>
 80006e6:	4603      	mov	r3, r0
 80006e8:	83bb      	strh	r3, [r7, #28]

	 	  raw = raw/22.4;
 80006ea:	8bfb      	ldrh	r3, [r7, #30]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006f4:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000748 <main+0xb8>
 80006f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000700:	ee17 3a90 	vmov	r3, s15
 8000704:	83fb      	strh	r3, [r7, #30]
	 	  raw2 = raw2/22.4;
 8000706:	8bbb      	ldrh	r3, [r7, #28]
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000710:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000748 <main+0xb8>
 8000714:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000718:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	83bb      	strh	r3, [r7, #28]


	 	  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);

	 	  sprintf(msg, "%hu\r\n",raw);
 8000722:	8bfa      	ldrh	r2, [r7, #30]
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	490b      	ldr	r1, [pc, #44]	; (8000758 <main+0xc8>)
 800072a:	4618      	mov	r0, r3
 800072c:	f007 f85c 	bl	80077e8 <siprintf>
	 	  sprintf(msg2, "%hu\r\n",raw2);
 8000730:	8bba      	ldrh	r2, [r7, #28]
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4908      	ldr	r1, [pc, #32]	; (8000758 <main+0xc8>)
 8000736:	4618      	mov	r0, r3
 8000738:	f007 f856 	bl	80077e8 <siprintf>


	 	  // HAL_UART_Transmit(&huart3,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	 	  HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fda1 	bl	8001284 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000742:	e7b8      	b.n	80006b6 <main+0x26>
 8000744:	f3af 8000 	nop.w
 8000748:	66666666 	.word	0x66666666
 800074c:	40366666 	.word	0x40366666
 8000750:	2400007c 	.word	0x2400007c
 8000754:	240000e0 	.word	0x240000e0
 8000758:	08008148 	.word	0x08008148

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	; 0x70
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	224c      	movs	r2, #76	; 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 f85c 	bl	8007828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f007 f856 	bl	8007828 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800077c:	4b30      	ldr	r3, [pc, #192]	; (8000840 <SystemClock_Config+0xe4>)
 800077e:	f04f 32ff 	mov.w	r2, #4294967295
 8000782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000786:	2004      	movs	r0, #4
 8000788:	f002 fa32 	bl	8002bf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <SystemClock_Config+0xe8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <SystemClock_Config+0xe8>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xe8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemClock_Config+0xe8>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007b8:	2321      	movs	r3, #33	; 0x21
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007d2:	2318      	movs	r3, #24
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007da:	2304      	movs	r3, #4
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e2:	230c      	movs	r3, #12
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fa56 	bl	8002ca4 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fe:	f000 fa9d 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	233f      	movs	r3, #63	; 0x3f
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fe6e 	bl	8003508 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000832:	f000 fa83 	bl	8000d3c <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3770      	adds	r7, #112	; 0x70
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	58024400 	.word	0x58024400
 8000844:	58024800 	.word	0x58024800

08000848 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0b0      	sub	sp, #192	; 0xc0
 800084c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	22c0      	movs	r2, #192	; 0xc0
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f006 ffe7 	bl	8007828 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800085a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800086a:	2310      	movs	r3, #16
 800086c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800086e:	2303      	movs	r3, #3
 8000870:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800087a:	23c0      	movs	r3, #192	; 0xc0
 800087c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f9c6 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800089a:	f000 fa4f 	bl	8000d3c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37c0      	adds	r7, #192	; 0xc0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <MX_ADC1_Init+0xe4>)
 80008ce:	4a30      	ldr	r2, [pc, #192]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <MX_ADC1_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <MX_ADC1_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_ADC1_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_ADC1_Init+0xe4>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_ADC1_Init+0xe4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_ADC1_Init+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <MX_ADC1_Init+0xe4>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_ADC1_Init+0xe4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_ADC1_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_ADC1_Init+0xe4>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_ADC1_Init+0xe4>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ADC1_Init+0xe4>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ADC1_Init+0xe4>)
 800091c:	2200      	movs	r2, #0
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_ADC1_Init+0xe4>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_ADC1_Init+0xe4>)
 800092a:	f000 fec7 	bl	80016bc <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 fa02 	bl	8000d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_ADC1_Init+0xe4>)
 8000944:	f001 fe0a 	bl	800255c <HAL_ADCEx_MultiModeConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800094e:	f000 f9f5 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_ADC1_Init+0xec>)
 8000954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000956:	2306      	movs	r3, #6
 8000958:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800095a:	2304      	movs	r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800095e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000964:	2304      	movs	r3, #4
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_ADC1_Init+0xe4>)
 8000976:	f001 f99b 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000980:	f000 f9dc 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2400007c 	.word	0x2400007c
 8000990:	40022000 	.word	0x40022000
 8000994:	08600004 	.word	0x08600004

08000998 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <MX_ADC2_Init+0xc4>)
 80009b4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_ADC2_Init+0xc0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_ADC2_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_ADC2_Init+0xc0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_ADC2_Init+0xc0>)
 8000a0e:	f000 fe55 	bl	80016bc <HAL_ADC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000a18:	f000 f990 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a20:	2306      	movs	r3, #6
 8000a22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000a24:	2304      	movs	r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_ADC2_Init+0xc0>)
 8000a40:	f001 f936 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f000 f977 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	240000e0 	.word	0x240000e0
 8000a5c:	40022100 	.word	0x40022100

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_USART3_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aaa:	f005 fcc3 	bl	8006434 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f942 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000abc:	f006 fdc9 	bl	8007652 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f939 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f006 fdfe 	bl	80076ce <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f930 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ade:	f006 fd7f 	bl	80075e0 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f928 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24000144 	.word	0x24000144
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b80      	ldr	r3, [pc, #512]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b24:	4a7e      	ldr	r2, [pc, #504]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2e:	4b7c      	ldr	r3, [pc, #496]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3c:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b42:	4a77      	ldr	r2, [pc, #476]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4c:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	4b71      	ldr	r3, [pc, #452]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b60:	4a6f      	ldr	r2, [pc, #444]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6a:	4b6d      	ldr	r3, [pc, #436]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b69      	ldr	r3, [pc, #420]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7e:	4a68      	ldr	r2, [pc, #416]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b88:	4b65      	ldr	r3, [pc, #404]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b62      	ldr	r3, [pc, #392]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	4a60      	ldr	r2, [pc, #384]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba6:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	4a59      	ldr	r2, [pc, #356]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc4:	4b56      	ldr	r3, [pc, #344]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b53      	ldr	r3, [pc, #332]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be2:	4b4f      	ldr	r3, [pc, #316]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf0:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <MX_GPIO_Init+0x218>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	4843      	ldr	r0, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x21c>)
 8000c16:	f001 ffd1 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c20:	4841      	ldr	r0, [pc, #260]	; (8000d28 <MX_GPIO_Init+0x220>)
 8000c22:	f001 ffcb 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4840      	ldr	r0, [pc, #256]	; (8000d2c <MX_GPIO_Init+0x224>)
 8000c2c:	f001 ffc6 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	483a      	ldr	r0, [pc, #232]	; (8000d30 <MX_GPIO_Init+0x228>)
 8000c46:	f001 fe09 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4830      	ldr	r0, [pc, #192]	; (8000d24 <MX_GPIO_Init+0x21c>)
 8000c64:	f001 fdfa 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c68:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4829      	ldr	r0, [pc, #164]	; (8000d28 <MX_GPIO_Init+0x220>)
 8000c82:	f001 fdeb 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_GPIO_Init+0x22c>)
 8000c9c:	f001 fdde 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x230>)
 8000cb6:	f001 fdd1 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ccc:	230a      	movs	r3, #10
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_GPIO_Init+0x230>)
 8000cd8:	f001 fdc0 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <MX_GPIO_Init+0x230>)
 8000cf6:	f001 fdb1 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_GPIO_Init+0x224>)
 8000d12:	f001 fda3 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58021400 	.word	0x58021400
 8000d28:	58020400 	.word	0x58020400
 8000d2c:	58021000 	.word	0x58021000
 8000d30:	58020800 	.word	0x58020800
 8000d34:	58021800 	.word	0x58021800
 8000d38:	58020000 	.word	0x58020000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x30>)
 8000d50:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x30>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x30>)
 8000d60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a36      	ldr	r2, [pc, #216]	; (8000e74 <HAL_ADC_MspInit+0xf8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d134      	bne.n	8000e08 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000da6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10e      	bne.n	8000dce <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000db0:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000db2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000dc2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd4:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000de0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <HAL_ADC_MspInit+0x104>)
 8000e02:	f001 fd2b 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e06:	e031      	b.n	8000e6c <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_ADC_MspInit+0x108>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12c      	bne.n	8000e6c <HAL_ADC_MspInit+0xf0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_ADC_MspInit+0xfc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10e      	bne.n	8000e42 <HAL_ADC_MspInit+0xc6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e26:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e36:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_ADC_MspInit+0x100>)
 8000e54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000e60:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000e64:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e68:	f000 fa30 	bl	80012cc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	; 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40022000 	.word	0x40022000
 8000e78:	240001d8 	.word	0x240001d8
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58021400 	.word	0x58021400
 8000e84:	40022100 	.word	0x40022100

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	; 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	22c0      	movs	r2, #192	; 0xc0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fcbd 	bl	8007828 <memset>
  if(huart->Instance==USART3)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_UART_MspInit+0xc8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d146      	bne.n	8000f46 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb8:	f04f 0202 	mov.w	r2, #2
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fea6 	bl	8003c20 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eda:	f7ff ff2f 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000ee0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0xcc>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0xd0>)
 8000f42:	f001 fc8b 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	37e8      	adds	r7, #232	; 0xe8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f94c 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f006 fc2a 	bl	8007838 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	24100000 	.word	0x24100000
 8001010:	00000400 	.word	0x00000400
 8001014:	240001dc 	.word	0x240001dc
 8001018:	24000330 	.word	0x24000330

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <SystemInit+0xd0>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <SystemInit+0xd0>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <SystemInit+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	2b02      	cmp	r3, #2
 800103a:	d807      	bhi.n	800104c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <SystemInit+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	4a2a      	ldr	r2, [pc, #168]	; (80010f0 <SystemInit+0xd4>)
 8001046:	f043 0303 	orr.w	r3, r3, #3
 800104a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <SystemInit+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <SystemInit+0xd8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <SystemInit+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemInit+0xd8>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4924      	ldr	r1, [pc, #144]	; (80010f4 <SystemInit+0xd8>)
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <SystemInit+0xdc>)
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <SystemInit+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <SystemInit+0xd4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <SystemInit+0xd4>)
 8001080:	f043 0303 	orr.w	r3, r3, #3
 8001084:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <SystemInit+0xd8>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemInit+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SystemInit+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <SystemInit+0xd8>)
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <SystemInit+0xe0>)
 800109c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SystemInit+0xd8>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <SystemInit+0xe4>)
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <SystemInit+0xd8>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <SystemInit+0xe8>)
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <SystemInit+0xd8>)
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <SystemInit+0xe8>)
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <SystemInit+0xd8>)
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <SystemInit+0xe8>)
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <SystemInit+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <SystemInit+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <SystemInit+0xd8>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <SystemInit+0xd8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SystemInit+0xec>)
 80010dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	52002000 	.word	0x52002000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010fc:	02020200 	.word	0x02020200
 8001100:	01ff0000 	.word	0x01ff0000
 8001104:	01010280 	.word	0x01010280
 8001108:	52004000 	.word	0x52004000

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001110:	f7ff ff84 	bl	800101c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	; (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800113a:	f006 fb83 	bl	8007844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff faa7 	bl	8000690 <main>
  bx  lr
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001148:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800114c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001150:	080081cc 	.word	0x080081cc
  ldr r2, =_sbss
 8001154:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001158:	2400032c 	.word	0x2400032c

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	2003      	movs	r0, #3
 8001168:	f001 fb46 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800116c:	f002 fb82 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8001170:	4602      	mov	r2, r0
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_Init+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	4913      	ldr	r1, [pc, #76]	; (80011cc <HAL_Init+0x6c>)
 800117e:	5ccb      	ldrb	r3, [r1, r3]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_Init+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_Init+0x6c>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_Init+0x70>)
 80011a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_Init+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f814 	bl	80011d8 <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e002      	b.n	80011c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ba:	f7ff fdc5 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	58024400 	.word	0x58024400
 80011cc:	08008150 	.word	0x08008150
 80011d0:	24000004 	.word	0x24000004
 80011d4:	24000000 	.word	0x24000000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_InitTick+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e021      	b.n	8001230 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x64>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_InitTick+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fb1d 	bl	8002842 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f001 faf5 	bl	800280e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x68>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400000c 	.word	0x2400000c
 800123c:	24000000 	.word	0x24000000
 8001240:	24000008 	.word	0x24000008

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	2400000c 	.word	0x2400000c
 8001268:	240001e0 	.word	0x240001e0

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	240001e0 	.word	0x240001e0

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2400000c 	.word	0x2400000c

080012cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	43db      	mvns	r3, r3
 80012de:	401a      	ands	r2, r3
 80012e0:	4904      	ldr	r1, [pc, #16]	; (80012f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	58000400 	.word	0x58000400

080012f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	609a      	str	r2, [r3, #8]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3360      	adds	r3, #96	; 0x60
 8001372:	461a      	mov	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	430b      	orrs	r3, r1
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	611a      	str	r2, [r3, #16]
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b087      	sub	sp, #28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3360      	adds	r3, #96	; 0x60
 80013e2:	461a      	mov	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	601a      	str	r2, [r3, #0]
  }
}
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800142e:	b480      	push	{r7}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3330      	adds	r3, #48	; 0x30
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	4413      	add	r3, r2
 800144c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	211f      	movs	r1, #31
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	0e9b      	lsrs	r3, r3, #26
 8001466:	f003 011f 	and.w	r1, r3, #31
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3314      	adds	r3, #20
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	0e5b      	lsrs	r3, r3, #25
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	0d1b      	lsrs	r3, r3, #20
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2107      	movs	r1, #7
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	0d1b      	lsrs	r3, r3, #20
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0318 	and.w	r3, r3, #24
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001500:	40d9      	lsrs	r1, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	400b      	ands	r3, r1
 8001506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	000fffff 	.word	0x000fffff

08001524 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 031f 	and.w	r3, r3, #31
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <LL_ADC_DisableDeepPowerDown+0x20>)
 800156a:	4013      	ands	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6093      	str	r3, [r2, #8]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	5fffffc0 	.word	0x5fffffc0

08001580 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001594:	d101      	bne.n	800159a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <LL_ADC_EnableInternalRegulator+0x24>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	6fffffc0 	.word	0x6fffffc0

080015d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015e4:	d101      	bne.n	80015ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <LL_ADC_Enable+0x24>)
 8001606:	4013      	ands	r3, r2
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	7fffffc0 	.word	0x7fffffc0

08001620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <LL_ADC_IsEnabled+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_ADC_IsEnabled+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <LL_ADC_REG_StartConversion+0x24>)
 8001656:	4013      	ands	r3, r2
 8001658:	f043 0204 	orr.w	r2, r3, #4
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	7fffffc0 	.word	0x7fffffc0

08001670 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b04      	cmp	r3, #4
 8001682:	d101      	bne.n	8001688 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d101      	bne.n	80016ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e138      	b.n	8001948 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fb49 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff3f 	bl	8001580 <LL_ADC_IsDeepPowerDownEnabled>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff25 	bl	800155c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff5a 	bl	80015d0 <LL_ADC_IsInternalRegulatorEnabled>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d114      	bne.n	800174c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff3e 	bl	80015a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_ADC_Init+0x294>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	4a88      	ldr	r2, [pc, #544]	; (8001954 <HAL_ADC_Init+0x298>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800173e:	e002      	b.n	8001746 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f9      	bne.n	8001740 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff3d 	bl	80015d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f043 0210 	orr.w	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff77 	bl	8001670 <LL_ADC_REG_IsConversionOngoing>
 8001782:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 80d2 	bne.w	8001936 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 80ce 	bne.w	8001936 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017a2:	f043 0202 	orr.w	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff36 	bl	8001620 <LL_ADC_IsEnabled>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d110      	bne.n	80017dc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ba:	4867      	ldr	r0, [pc, #412]	; (8001958 <HAL_ADC_Init+0x29c>)
 80017bc:	f7ff ff30 	bl	8001620 <LL_ADC_IsEnabled>
 80017c0:	4604      	mov	r4, r0
 80017c2:	4866      	ldr	r0, [pc, #408]	; (800195c <HAL_ADC_Init+0x2a0>)
 80017c4:	f7ff ff2c 	bl	8001620 <LL_ADC_IsEnabled>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4323      	orrs	r3, r4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4862      	ldr	r0, [pc, #392]	; (8001960 <HAL_ADC_Init+0x2a4>)
 80017d8:	f7ff fd8e 	bl	80012f8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7d5b      	ldrb	r3, [r3, #21]
 80017e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80017ec:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
 80017f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7f1b      	ldrb	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	3b01      	subs	r3, #1
 8001806:	045b      	lsls	r3, r3, #17
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_ADC_Init+0x2a8>)
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	430b      	orrs	r3, r1
 800183c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff14 	bl	8001670 <LL_ADC_REG_IsConversionOngoing>
 8001848:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff21 	bl	8001696 <LL_ADC_INJ_IsConversionOngoing>
 8001854:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d14a      	bne.n	80018f2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d147      	bne.n	80018f2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7d1b      	ldrb	r3, [r3, #20]
 8001866:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_ADC_Init+0x2ac>)
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	430b      	orrs	r3, r1
 8001882:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800188a:	2b01      	cmp	r3, #1
 800188c:	d11b      	bne.n	80018c6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_ADC_Init+0x2b0>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a2:	3a01      	subs	r2, #1
 80018a4:	0411      	lsls	r1, r2, #16
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018b6:	430a      	orrs	r2, r1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	e007      	b.n	80018d6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fd41 	bl	8002374 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10c      	bne.n	8001914 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f023 010f 	bic.w	r1, r3, #15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	e007      	b.n	8001924 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020f 	bic.w	r2, r2, #15
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f023 0303 	bic.w	r3, r3, #3
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
 8001934:	e007      	b.n	8001946 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001946:	7ffb      	ldrb	r3, [r7, #31]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3724      	adds	r7, #36	; 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	24000000 	.word	0x24000000
 8001954:	053e2d63 	.word	0x053e2d63
 8001958:	40022000 	.word	0x40022000
 800195c:	40022100 	.word	0x40022100
 8001960:	40022300 	.word	0x40022300
 8001964:	fff0c003 	.word	0xfff0c003
 8001968:	ffffbffc 	.word	0xffffbffc
 800196c:	fc00f81e 	.word	0xfc00f81e

08001970 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001978:	4856      	ldr	r0, [pc, #344]	; (8001ad4 <HAL_ADC_Start+0x164>)
 800197a:	f7ff fdd3 	bl	8001524 <LL_ADC_GetMultimode>
 800197e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fe73 	bl	8001670 <LL_ADC_REG_IsConversionOngoing>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	f040 809a 	bne.w	8001ac6 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_ADC_Start+0x30>
 800199c:	2302      	movs	r3, #2
 800199e:	e095      	b.n	8001acc <HAL_ADC_Start+0x15c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fc67 	bl	800227c <ADC_Enable>
 80019ae:	4603      	mov	r3, r0
 80019b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8081 	bne.w	8001abc <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_ADC_Start+0x168>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a43      	ldr	r2, [pc, #268]	; (8001adc <HAL_ADC_Start+0x16c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d002      	beq.n	80019da <HAL_ADC_Start+0x6a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	e000      	b.n	80019dc <HAL_ADC_Start+0x6c>
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_ADC_Start+0x170>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d002      	beq.n	80019ea <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a02:	d106      	bne.n	8001a12 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f023 0206 	bic.w	r2, r3, #6
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	221c      	movs	r2, #28
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_ADC_Start+0x16c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d002      	beq.n	8001a38 <HAL_ADC_Start+0xc8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_Start+0xca>
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_ADC_Start+0x170>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d008      	beq.n	8001a54 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	d114      	bne.n	8001a7e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fde6 	bl	8001648 <LL_ADC_REG_StartConversion>
 8001a7c:	e025      	b.n	8001aca <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_ADC_Start+0x16c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d002      	beq.n	8001a9a <HAL_ADC_Start+0x12a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e000      	b.n	8001a9c <HAL_ADC_Start+0x12c>
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_ADC_Start+0x170>)
 8001a9c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
 8001aba:	e006      	b.n	8001aca <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ac4:	e001      	b.n	8001aca <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40022300 	.word	0x40022300
 8001ad8:	fffff0fe 	.word	0xfffff0fe
 8001adc:	40022100 	.word	0x40022100
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aee:	4866      	ldr	r0, [pc, #408]	; (8001c88 <HAL_ADC_PollForConversion+0x1a4>)
 8001af0:	f7ff fd18 	bl	8001524 <LL_ADC_GetMultimode>
 8001af4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d102      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001afe:	2308      	movs	r3, #8
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e02a      	b.n	8001b5a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d002      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b09      	cmp	r3, #9
 8001b14:	d111      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0a4      	b.n	8001c7e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b34:	2304      	movs	r3, #4
 8001b36:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001b38:	e00f      	b.n	8001b5a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b3a:	4853      	ldr	r0, [pc, #332]	; (8001c88 <HAL_ADC_PollForConversion+0x1a4>)
 8001b3c:	f7ff fd00 	bl	8001540 <LL_ADC_GetMultiDMATransfer>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f043 0220 	orr.w	r2, r3, #32
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e093      	b.n	8001c7e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b56:	2304      	movs	r3, #4
 8001b58:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b5a:	f7ff fb87 	bl	800126c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b60:	e021      	b.n	8001ba6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d01d      	beq.n	8001ba6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b6a:	f7ff fb7f 	bl	800126c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <HAL_ADC_PollForConversion+0x9c>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d112      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f043 0204 	orr.w	r2, r3, #4
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e06b      	b.n	8001c7e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0d6      	beq.n	8001b62 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc1f 	bl	8001408 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01c      	beq.n	8001c0a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7d5b      	ldrb	r3, [r3, #21]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d118      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d111      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_ADC_PollForConversion+0x1a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_PollForConversion+0x136>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e000      	b.n	8001c1c <HAL_ADC_PollForConversion+0x138>
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_ADC_PollForConversion+0x1ac>)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d008      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d002      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d104      	bne.n	8001c40 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	e00c      	b.n	8001c5a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_ADC_PollForConversion+0x1a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d002      	beq.n	8001c50 <HAL_ADC_PollForConversion+0x16c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_PollForConversion+0x16e>
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_ADC_PollForConversion+0x1ac>)
 8001c52:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d104      	bne.n	8001c6a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2208      	movs	r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e008      	b.n	8001c7c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	220c      	movs	r2, #12
 8001c7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022300 	.word	0x40022300
 8001c8c:	40022100 	.word	0x40022100
 8001c90:	40022000 	.word	0x40022000

08001c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b0a1      	sub	sp, #132	; 0x84
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a9a      	ldr	r2, [pc, #616]	; (8001f34 <HAL_ADC_ConfigChannel+0x284>)
 8001cca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x2a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e2bc      	b.n	8002254 <HAL_ADC_ConfigChannel+0x5a4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fcc2 	bl	8001670 <LL_ADC_REG_IsConversionOngoing>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 82a1 	bne.w	8002236 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x62>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0e9b      	lsrs	r3, r3, #26
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	e016      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x90>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d22:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	69d1      	ldr	r1, [r2, #28]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff fb67 	bl	800142e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fc83 	bl	8001670 <LL_ADC_REG_IsConversionOngoing>
 8001d6a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc90 	bl	8001696 <LL_ADC_INJ_IsConversionOngoing>
 8001d76:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80a0 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 809c 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f7ff fb76 	bl	8001486 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x110>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	e00a      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x126>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d027      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dee:	f7ff fab7 	bl	8001360 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x158>
 8001e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x15a>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff fae1 	bl	80013d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6919      	ldr	r1, [r3, #16]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d102      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x176>
 8001e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e24:	e000      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x178>
 8001e26:	2300      	movs	r3, #0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f7ff fab9 	bl	80013a0 <LL_ADC_SetDataRightShift>
 8001e2e:	e047      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d107      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	069b      	lsls	r3, r3, #26
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e76:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e9a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ebe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fbab 	bl	8001620 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 81bb 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7ff fafc 	bl	80014dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_ADC_ConfigChannel+0x284>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	f040 8130 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x268>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e01b      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x2a0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e005      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x290>
 8001f34:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	bf94      	ite	ls
 8001f4a:	2301      	movls	r3, #1
 8001f4c:	2300      	movhi	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d079      	beq.n	8002048 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x2c0>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	3301      	adds	r3, #1
 8001f68:	069b      	lsls	r3, r3, #26
 8001f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6e:	e015      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x2ec>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f80:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e003      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	069b      	lsls	r3, r3, #26
 8001f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x30c>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	e017      	b.n	8001fec <HAL_ADC_ConfigChannel+0x33c>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e003      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	ea42 0103 	orr.w	r1, r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x362>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	051b      	lsls	r3, r3, #20
 8002010:	e018      	b.n	8002044 <HAL_ADC_ConfigChannel+0x394>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002044:	430b      	orrs	r3, r1
 8002046:	e07e      	b.n	8002146 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x3b4>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	3301      	adds	r3, #1
 800205c:	069b      	lsls	r3, r3, #26
 800205e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002062:	e015      	b.n	8002090 <HAL_ADC_ConfigChannel+0x3e0>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e003      	b.n	8002088 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3301      	adds	r3, #1
 800208a:	069b      	lsls	r3, r3, #26
 800208c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x400>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	e017      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x430>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	61bb      	str	r3, [r7, #24]
  return result;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80020c8:	2320      	movs	r3, #32
 80020ca:	e003      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_ADC_ConfigChannel+0x45c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	3b1e      	subs	r3, #30
 8002104:	051b      	lsls	r3, r3, #20
 8002106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800210a:	e01b      	b.n	8002144 <HAL_ADC_ConfigChannel+0x494>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	60fb      	str	r3, [r7, #12]
  return result;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	3b1e      	subs	r3, #30
 800213e:	051b      	lsls	r3, r3, #20
 8002140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002144:	430b      	orrs	r3, r1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	4619      	mov	r1, r3
 800214c:	f7ff f99b 	bl	8001486 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da77      	bge.n	8002248 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002158:	4840      	ldr	r0, [pc, #256]	; (800225c <HAL_ADC_ConfigChannel+0x5ac>)
 800215a:	f7ff f8f3 	bl	8001344 <LL_ADC_GetCommonPathInternalCh>
 800215e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002160:	483f      	ldr	r0, [pc, #252]	; (8002260 <HAL_ADC_ConfigChannel+0x5b0>)
 8002162:	f7ff fa5d 	bl	8001620 <LL_ADC_IsEnabled>
 8002166:	4604      	mov	r4, r0
 8002168:	483e      	ldr	r0, [pc, #248]	; (8002264 <HAL_ADC_ConfigChannel+0x5b4>)
 800216a:	f7ff fa59 	bl	8001620 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	4323      	orrs	r3, r4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d155      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_ADC_ConfigChannel+0x5b8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d122      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x516>
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11d      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a35      	ldr	r2, [pc, #212]	; (8002264 <HAL_ADC_ConfigChannel+0x5b4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d159      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800219a:	4619      	mov	r1, r3
 800219c:	482f      	ldr	r0, [pc, #188]	; (800225c <HAL_ADC_ConfigChannel+0x5ac>)
 800219e:	f7ff f8be 	bl	800131e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_ADC_ConfigChannel+0x5bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_ADC_ConfigChannel+0x5c0>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	3301      	adds	r3, #1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021b6:	e002      	b.n	80021be <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	e040      	b.n	8002248 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <HAL_ADC_ConfigChannel+0x5c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d111      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x544>
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_ADC_ConfigChannel+0x5b4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d131      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80021e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	4619      	mov	r1, r3
 80021ec:	481b      	ldr	r0, [pc, #108]	; (800225c <HAL_ADC_ConfigChannel+0x5ac>)
 80021ee:	f7ff f896 	bl	800131e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f2:	e029      	b.n	8002248 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_ADC_ConfigChannel+0x5c8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d124      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x598>
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11f      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_ADC_ConfigChannel+0x5b4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d11a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002218:	4619      	mov	r1, r3
 800221a:	4810      	ldr	r0, [pc, #64]	; (800225c <HAL_ADC_ConfigChannel+0x5ac>)
 800221c:	f7ff f87f 	bl	800131e <LL_ADC_SetCommonPathInternalCh>
 8002220:	e012      	b.n	8002248 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002234:	e008      	b.n	8002248 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002250:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002254:	4618      	mov	r0, r3
 8002256:	3784      	adds	r7, #132	; 0x84
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	40022300 	.word	0x40022300
 8002260:	40022000 	.word	0x40022000
 8002264:	40022100 	.word	0x40022100
 8002268:	cb840000 	.word	0xcb840000
 800226c:	24000000 	.word	0x24000000
 8002270:	053e2d63 	.word	0x053e2d63
 8002274:	bac04000 	.word	0xbac04000
 8002278:	cfb80000 	.word	0xcfb80000

0800227c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f9c9 	bl	8001620 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d161      	bne.n	8002358 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <ADC_Enable+0xe8>)
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00d      	beq.n	80022be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e04d      	b.n	800235a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f998 	bl	80015f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022c8:	f7fe ffd0 	bl	800126c <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ce:	4826      	ldr	r0, [pc, #152]	; (8002368 <ADC_Enable+0xec>)
 80022d0:	f7ff f928 	bl	8001524 <LL_ADC_GetMultimode>
 80022d4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a24      	ldr	r2, [pc, #144]	; (800236c <ADC_Enable+0xf0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d002      	beq.n	80022e6 <ADC_Enable+0x6a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	e000      	b.n	80022e8 <ADC_Enable+0x6c>
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <ADC_Enable+0xf4>)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d02c      	beq.n	800234a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d130      	bne.n	8002358 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f6:	e028      	b.n	800234a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f98f 	bl	8001620 <LL_ADC_IsEnabled>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f973 	bl	80015f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002312:	f7fe ffab 	bl	800126c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d914      	bls.n	800234a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d00d      	beq.n	800234a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f043 0210 	orr.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d1cf      	bne.n	80022f8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	8000003f 	.word	0x8000003f
 8002368:	40022300 	.word	0x40022300
 800236c:	40022100 	.word	0x40022100
 8002370:	40022000 	.word	0x40022000

08002374 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800237c:	4b60      	ldr	r3, [pc, #384]	; (8002500 <ADC_ConfigureBoostMode+0x18c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01c      	beq.n	80023c2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002388:	f001 fbee 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 800238c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002396:	d010      	beq.n	80023ba <ADC_ConfigureBoostMode+0x46>
 8002398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800239c:	d873      	bhi.n	8002486 <ADC_ConfigureBoostMode+0x112>
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d002      	beq.n	80023aa <ADC_ConfigureBoostMode+0x36>
 80023a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023a8:	d16d      	bne.n	8002486 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
        break;
 80023b8:	e068      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
        break;
 80023c0:	e064      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80023c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	f002 fde7 	bl	8004f9c <HAL_RCCEx_GetPeriphCLKFreq>
 80023ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023d8:	d051      	beq.n	800247e <ADC_ConfigureBoostMode+0x10a>
 80023da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023de:	d854      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 80023e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023e4:	d047      	beq.n	8002476 <ADC_ConfigureBoostMode+0x102>
 80023e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023ea:	d84e      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 80023ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023f0:	d03d      	beq.n	800246e <ADC_ConfigureBoostMode+0xfa>
 80023f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023f6:	d848      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 80023f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023fc:	d033      	beq.n	8002466 <ADC_ConfigureBoostMode+0xf2>
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002402:	d842      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 8002404:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002408:	d029      	beq.n	800245e <ADC_ConfigureBoostMode+0xea>
 800240a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800240e:	d83c      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 8002410:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002414:	d01a      	beq.n	800244c <ADC_ConfigureBoostMode+0xd8>
 8002416:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800241a:	d836      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 800241c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002420:	d014      	beq.n	800244c <ADC_ConfigureBoostMode+0xd8>
 8002422:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002426:	d830      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 8002428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800242c:	d00e      	beq.n	800244c <ADC_ConfigureBoostMode+0xd8>
 800242e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002432:	d82a      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 8002434:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002438:	d008      	beq.n	800244c <ADC_ConfigureBoostMode+0xd8>
 800243a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800243e:	d824      	bhi.n	800248a <ADC_ConfigureBoostMode+0x116>
 8002440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002444:	d002      	beq.n	800244c <ADC_ConfigureBoostMode+0xd8>
 8002446:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800244a:	d11e      	bne.n	800248a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	60fb      	str	r3, [r7, #12]
        break;
 800245c:	e016      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	60fb      	str	r3, [r7, #12]
        break;
 8002464:	e012      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	60fb      	str	r3, [r7, #12]
        break;
 800246c:	e00e      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	60fb      	str	r3, [r7, #12]
        break;
 8002474:	e00a      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	09db      	lsrs	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]
        break;
 800247c:	e006      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	60fb      	str	r3, [r7, #12]
        break;
 8002484:	e002      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
        break;
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800248a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <ADC_ConfigureBoostMode+0x190>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d808      	bhi.n	80024ac <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024a8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80024aa:	e025      	b.n	80024f8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a16      	ldr	r2, [pc, #88]	; (8002508 <ADC_ConfigureBoostMode+0x194>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d80a      	bhi.n	80024ca <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	e016      	b.n	80024f8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <ADC_ConfigureBoostMode+0x198>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d80a      	bhi.n	80024e8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	e007      	b.n	80024f8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40022300 	.word	0x40022300
 8002504:	005f5e10 	.word	0x005f5e10
 8002508:	00bebc20 	.word	0x00bebc20
 800250c:	017d7840 	.word	0x017d7840

08002510 <LL_ADC_IsEnabled>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <LL_ADC_IsEnabled+0x18>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_IsEnabled+0x1a>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_REG_IsConversionOngoing>:
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d101      	bne.n	800254e <LL_ADC_REG_IsConversionOngoing+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b09f      	sub	sp, #124	; 0x7c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002576:	2302      	movs	r3, #2
 8002578:	e080      	b.n	800267c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3d      	ldr	r2, [pc, #244]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002594:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	e001      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e05f      	b.n	800267c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffb9 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffb3 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d141      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d13e      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80025de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fa:	4822      	ldr	r0, [pc, #136]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025fc:	f7ff ff88 	bl	8002510 <LL_ADC_IsEnabled>
 8002600:	4604      	mov	r4, r0
 8002602:	4821      	ldr	r0, [pc, #132]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002604:	f7ff ff84 	bl	8002510 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	4323      	orrs	r3, r4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d12e      	bne.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002616:	4013      	ands	r3, r2
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	6811      	ldr	r1, [r2, #0]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	430a      	orrs	r2, r1
 8002622:	431a      	orrs	r2, r3
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002628:	e021      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800262a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002634:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002636:	4813      	ldr	r0, [pc, #76]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002638:	f7ff ff6a 	bl	8002510 <LL_ADC_IsEnabled>
 800263c:	4604      	mov	r4, r0
 800263e:	4812      	ldr	r0, [pc, #72]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002640:	f7ff ff66 	bl	8002510 <LL_ADC_IsEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	4323      	orrs	r3, r4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800264c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002652:	4013      	ands	r3, r2
 8002654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002656:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002658:	e009      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800266c:	e000      	b.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800266e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002678:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800267c:	4618      	mov	r0, r3
 800267e:	377c      	adds	r7, #124	; 0x7c
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	40022000 	.word	0x40022000
 8002688:	40022100 	.word	0x40022100
 800268c:	40022300 	.word	0x40022300
 8002690:	fffff0e0 	.word	0xfffff0e0

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <__NVIC_SetPriorityGrouping+0x40>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x40>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00
 80026d8:	05fa0000 	.word	0x05fa0000

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	db0a      	blt.n	8002722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <__NVIC_SetPriority+0x4c>)
 8002712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	440b      	add	r3, r1
 800271c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002720:	e00a      	b.n	8002738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <__NVIC_SetPriority+0x50>)
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3b04      	subs	r3, #4
 8002730:	0112      	lsls	r2, r2, #4
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	440b      	add	r3, r1
 8002736:	761a      	strb	r2, [r3, #24]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000e100 	.word	0xe000e100
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f1c3 0307 	rsb	r3, r3, #7
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf28      	it	cs
 800276a:	2304      	movcs	r3, #4
 800276c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3304      	adds	r3, #4
 8002772:	2b06      	cmp	r3, #6
 8002774:	d902      	bls.n	800277c <NVIC_EncodePriority+0x30>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3b03      	subs	r3, #3
 800277a:	e000      	b.n	800277e <NVIC_EncodePriority+0x32>
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	401a      	ands	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43d9      	mvns	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	4313      	orrs	r3, r2
         );
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d301      	bcc.n	80027ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00f      	b.n	80027ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d2:	210f      	movs	r1, #15
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f7ff ff8e 	bl	80026f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <SysTick_Config+0x40>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff47 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff5e 	bl	80026dc <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff90 	bl	800274c <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5f 	bl	80026f8 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffb2 	bl	80027b4 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800286a:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_GPIO_Init+0x234>)
 800286c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800286e:	e194      	b.n	8002b9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8186 	beq.w	8002b94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_GPIO_Init+0x44>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d6:	2201      	movs	r2, #1
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b03      	cmp	r3, #3
 800290c:	d017      	beq.n	800293e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d123      	bne.n	8002992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80e0 	beq.w	8002b94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_GPIO_Init+0x23c>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <HAL_GPIO_Init+0x240>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d052      	beq.n	8002ac4 <HAL_GPIO_Init+0x268>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_GPIO_Init+0x244>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_GPIO_Init+0x248>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x24c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_GPIO_Init+0x250>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x254>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x21e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_GPIO_Init+0x258>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_GPIO_Init+0x25c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x216>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_GPIO_Init+0x260>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x212>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_GPIO_Init+0x264>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x20e>
 8002a66:	2309      	movs	r3, #9
 8002a68:	e02d      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	e02b      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	e029      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e027      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e025      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	e023      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e021      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e01f      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e01d      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e01b      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a8e:	bf00      	nop
 8002a90:	58000080 	.word	0x58000080
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58000400 	.word	0x58000400
 8002a9c:	58020000 	.word	0x58020000
 8002aa0:	58020400 	.word	0x58020400
 8002aa4:	58020800 	.word	0x58020800
 8002aa8:	58020c00 	.word	0x58020c00
 8002aac:	58021000 	.word	0x58021000
 8002ab0:	58021400 	.word	0x58021400
 8002ab4:	58021800 	.word	0x58021800
 8002ab8:	58021c00 	.word	0x58021c00
 8002abc:	58022000 	.word	0x58022000
 8002ac0:	58022400 	.word	0x58022400
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f002 0203 	and.w	r2, r2, #3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4093      	lsls	r3, r2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad6:	4938      	ldr	r1, [pc, #224]	; (8002bb8 <HAL_GPIO_Init+0x35c>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae63 	bne.w	8002870 <HAL_GPIO_Init+0x14>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	; 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	58000400 	.word	0x58000400

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d00a      	beq.n	8002c1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e040      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e03e      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c22:	491f      	ldr	r1, [pc, #124]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c2a:	f7fe fb1f 	bl	800126c <HAL_GetTick>
 8002c2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c30:	e009      	b.n	8002c46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c32:	f7fe fb1b 	bl	800126c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c40:	d901      	bls.n	8002c46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e028      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d1ee      	bne.n	8002c32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b1e      	cmp	r3, #30
 8002c58:	d008      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5e:	d005      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b1d      	cmp	r3, #29
 8002c64:	d002      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b2d      	cmp	r3, #45	; 0x2d
 8002c6a:	d114      	bne.n	8002c96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c6c:	f7fe fafe 	bl	800126c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c72:	e009      	b.n	8002c88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c74:	f7fe fafa 	bl	800126c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c82:	d901      	bls.n	8002c88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e007      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d1ee      	bne.n	8002c74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58024800 	.word	0x58024800

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc1f 	b.w	80034f6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b3 	beq.w	8002e2c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc6:	4b95      	ldr	r3, [pc, #596]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d007      	beq.n	8002cec <HAL_RCC_OscConfig+0x48>
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	2b18      	cmp	r3, #24
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8098 	beq.w	8002e2a <HAL_RCC_OscConfig+0x186>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8093 	bne.w	8002e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e3f6      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x7c>
 8002d12:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a81      	ldr	r2, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e058      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d112      	bne.n	8002d4e <HAL_RCC_OscConfig+0xaa>
 8002d28:	4b7c      	ldr	r3, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7b      	ldr	r2, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a78      	ldr	r2, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e041      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0xda>
 8002d58:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6f      	ldr	r2, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a6c      	ldr	r2, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e029      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x10a>
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e011      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fa47 	bl	800126c <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de2:	f7fe fa43 	bl	800126c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e380      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13e>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fa33 	bl	800126c <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fa2f 	bl	800126c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e36c      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x166>
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 808c 	beq.w	8002f52 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1bc>
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b18      	cmp	r3, #24
 8002e54:	d137      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x222>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d132      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e60:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1d4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e33e      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 0219 	bic.w	r2, r3, #25
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4925      	ldr	r1, [pc, #148]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f9ef 	bl	800126c <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe f9eb 	bl	800126c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e328      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec4:	e045      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0219 	bic.w	r2, r3, #25
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4910      	ldr	r1, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f9c4 	bl	800126c <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe f9c0 	bl	800126c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e2fd      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	4901      	ldr	r1, [pc, #4]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
 8002f1a:	e01a      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ae>
 8002f1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f20:	4b97      	ldr	r3, [pc, #604]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a96      	ldr	r2, [pc, #600]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f99e 	bl	800126c <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe f99a 	bl	800126c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e2d7      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f46:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06a      	beq.n	8003034 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f68:	4b85      	ldr	r3, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d007      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2e0>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	d11b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x30e>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d116      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f84:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e2ac      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9c:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4975      	ldr	r1, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb0:	e040      	b.n	8003034 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fba:	4b71      	ldr	r3, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a70      	ldr	r2, [pc, #448]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f951 	bl	800126c <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fce:	f7fe f94d 	bl	800126c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e28a      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe0:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
 8003000:	e018      	b.n	8003034 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f92d 	bl	800126c <HAL_GetTick>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003016:	f7fe f929 	bl	800126c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e266      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d036      	beq.n	80030ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d019      	beq.n	800307c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003048:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe f90a 	bl	800126c <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe f906 	bl	800126c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e243      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x3b8>
 800307a:	e018      	b.n	80030ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe f8f0 	bl	800126c <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe f8ec 	bl	800126c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e229      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ce:	f7fe f8cd 	bl	800126c <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fe f8c9 	bl	800126c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e206      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x432>
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003102:	f7fe f8b3 	bl	800126c <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310a:	f7fe f8af 	bl	800126c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1ec      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80af 	beq.w	8003294 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003142:	f7fe f893 	bl	800126c <HAL_GetTick>
 8003146:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fe f88f 	bl	800126c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1cc      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x4e4>
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a02      	ldr	r2, [pc, #8]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e05b      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 800317e:	bf00      	nop
 8003180:	58024400 	.word	0x58024400
 8003184:	58024800 	.word	0x58024800
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d112      	bne.n	80031b6 <HAL_RCC_OscConfig+0x512>
 8003190:	4b9d      	ldr	r3, [pc, #628]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a9c      	ldr	r2, [pc, #624]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a99      	ldr	r2, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
 80031a8:	4b97      	ldr	r3, [pc, #604]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a96      	ldr	r2, [pc, #600]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031ae:	f023 0304 	bic.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	e03f      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x540>
 80031be:	4b92      	ldr	r3, [pc, #584]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a91      	ldr	r2, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ca:	4b8f      	ldr	r3, [pc, #572]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a8e      	ldr	r2, [pc, #568]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	e028      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b85      	cmp	r3, #133	; 0x85
 80031ea:	d112      	bne.n	8003212 <HAL_RCC_OscConfig+0x56e>
 80031ec:	4b86      	ldr	r3, [pc, #536]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a85      	ldr	r2, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	4b83      	ldr	r3, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a82      	ldr	r2, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b80      	ldr	r3, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a7f      	ldr	r2, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e011      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 8003212:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a79      	ldr	r2, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b77      	ldr	r3, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a76      	ldr	r2, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe f815 	bl	800126c <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f811 	bl	800126c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e14c      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCC_OscConfig+0x5a2>
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fd ffff 	bl	800126c <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fd fffb 	bl	800126c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e136      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003288:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ee      	bne.n	8003272 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 812b 	beq.w	80034f4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a6:	2b18      	cmp	r3, #24
 80032a8:	f000 80bb 	beq.w	8003422 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	f040 8095 	bne.w	80033e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd ffd3 	bl	800126c <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd ffcf 	bl	800126c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e10c      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032dc:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x768>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	430a      	orrs	r2, r1
 80032fc:	4942      	ldr	r1, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	628b      	str	r3, [r1, #40]	; 0x28
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	3b01      	subs	r3, #1
 8003308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	3b01      	subs	r3, #1
 8003312:	025b      	lsls	r3, r3, #9
 8003314:	b29b      	uxth	r3, r3
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	3b01      	subs	r3, #1
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003332:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003334:	4313      	orrs	r3, r2
 8003336:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x76c>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003350:	00d2      	lsls	r2, r2, #3
 8003352:	492d      	ldr	r1, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003354:	4313      	orrs	r3, r2
 8003356:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f023 020c 	bic.w	r2, r3, #12
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4928      	ldr	r1, [pc, #160]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003366:	4313      	orrs	r3, r2
 8003368:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f023 0202 	bic.w	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4924      	ldr	r1, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003378:	4313      	orrs	r3, r2
 800337a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800339a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd ff58 	bl	800126c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd ff54 	bl	800126c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e091      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x71c>
 80033de:	e089      	b.n	80034f4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff3e 	bl	800126c <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f2:	e00f      	b.n	8003414 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd ff3a 	bl	800126c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d908      	bls.n	8003414 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e077      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
 8003406:	bf00      	nop
 8003408:	58024400 	.word	0x58024400
 800340c:	fffffc0c 	.word	0xfffffc0c
 8003410:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e9      	bne.n	80033f4 <HAL_RCC_OscConfig+0x750>
 8003420:	e068      	b.n	80034f4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b01      	cmp	r3, #1
 8003434:	d031      	beq.n	800349a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d12a      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d122      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d11a      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0a5b      	lsrs	r3, r3, #9
 8003468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d111      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d108      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0e1b      	lsrs	r3, r3, #24
 800348c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02b      	b.n	80034f6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	08db      	lsrs	r3, r3, #3
 80034a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034a8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d01f      	beq.n	80034f4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034c0:	f7fd fed4 	bl	800126c <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034c6:	bf00      	nop
 80034c8:	f7fd fed0 	bl	800126c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d0f9      	beq.n	80034c8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_RCC_OscConfig+0x860>)
 80034da:	4013      	ands	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034e0:	00d2      	lsls	r2, r2, #3
 80034e2:	4907      	ldr	r1, [pc, #28]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_OscConfig+0x85c>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3730      	adds	r7, #48	; 0x30
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	58024400 	.word	0x58024400
 8003504:	ffff0007 	.word	0xffff0007

08003508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e19c      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d910      	bls.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 020f 	bic.w	r2, r3, #15
 8003532:	4985      	ldr	r1, [pc, #532]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b83      	ldr	r3, [pc, #524]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e184      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	4b7b      	ldr	r3, [pc, #492]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003564:	429a      	cmp	r2, r3
 8003566:	d908      	bls.n	800357a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003568:	4b78      	ldr	r3, [pc, #480]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	4975      	ldr	r1, [pc, #468]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003576:	4313      	orrs	r3, r2
 8003578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	4b70      	ldr	r3, [pc, #448]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003592:	429a      	cmp	r2, r3
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003596:	4b6d      	ldr	r3, [pc, #436]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	496a      	ldr	r1, [pc, #424]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	4b64      	ldr	r3, [pc, #400]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d908      	bls.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035c4:	4b61      	ldr	r3, [pc, #388]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	495e      	ldr	r1, [pc, #376]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d908      	bls.n	8003604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035f2:	4b56      	ldr	r3, [pc, #344]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4953      	ldr	r1, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003600:	4313      	orrs	r3, r2
 8003602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4b4d      	ldr	r3, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	429a      	cmp	r2, r3
 800361e:	d908      	bls.n	8003632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f023 020f 	bic.w	r2, r3, #15
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4947      	ldr	r1, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800362e:	4313      	orrs	r3, r2
 8003630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d055      	beq.n	80036ea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800363e:	4b43      	ldr	r3, [pc, #268]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4940      	ldr	r1, [pc, #256]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800364c:	4313      	orrs	r3, r2
 800364e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d107      	bne.n	8003668 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0f6      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d107      	bne.n	8003680 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003670:	4b36      	ldr	r3, [pc, #216]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d115      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0ea      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0de      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0d6      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f023 0207 	bic.w	r2, r3, #7
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4925      	ldr	r1, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ba:	f7fd fdd7 	bl	800126c <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c2:	f7fd fdd3 	bl	800126c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0be      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d1eb      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	429a      	cmp	r2, r3
 8003704:	d208      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f023 020f 	bic.w	r2, r3, #15
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x244>)
 8003714:	4313      	orrs	r3, r2
 8003716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d214      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 020f 	bic.w	r2, r3, #15
 800372e:	4906      	ldr	r1, [pc, #24]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCC_ClockConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e086      	b.n	8003856 <HAL_RCC_ClockConfig+0x34e>
 8003748:	52002000 	.word	0x52002000
 800374c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003768:	429a      	cmp	r2, r3
 800376a:	d208      	bcs.n	800377e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	4939      	ldr	r1, [pc, #228]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 800377a:	4313      	orrs	r3, r2
 800377c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003796:	429a      	cmp	r2, r3
 8003798:	d208      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	492e      	ldr	r1, [pc, #184]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d208      	bcs.n	80037da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	4922      	ldr	r1, [pc, #136]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d010      	beq.n	8003808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d208      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4917      	ldr	r1, [pc, #92]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 8003804:	4313      	orrs	r3, r2
 8003806:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003808:	f000 f834 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	4912      	ldr	r1, [pc, #72]	; (8003864 <HAL_RCC_ClockConfig+0x35c>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x358>)
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_RCC_ClockConfig+0x35c>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_RCC_ClockConfig+0x360>)
 800383e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x364>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x368>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fcc4 	bl	80011d8 <HAL_InitTick>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	58024400 	.word	0x58024400
 8003864:	08008150 	.word	0x08008150
 8003868:	24000004 	.word	0x24000004
 800386c:	24000000 	.word	0x24000000
 8003870:	24000008 	.word	0x24000008

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387a:	4bb3      	ldr	r3, [pc, #716]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003882:	2b18      	cmp	r3, #24
 8003884:	f200 8155 	bhi.w	8003b32 <HAL_RCC_GetSysClockFreq+0x2be>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038f5 	.word	0x080038f5
 8003894:	08003b33 	.word	0x08003b33
 8003898:	08003b33 	.word	0x08003b33
 800389c:	08003b33 	.word	0x08003b33
 80038a0:	08003b33 	.word	0x08003b33
 80038a4:	08003b33 	.word	0x08003b33
 80038a8:	08003b33 	.word	0x08003b33
 80038ac:	08003b33 	.word	0x08003b33
 80038b0:	0800391b 	.word	0x0800391b
 80038b4:	08003b33 	.word	0x08003b33
 80038b8:	08003b33 	.word	0x08003b33
 80038bc:	08003b33 	.word	0x08003b33
 80038c0:	08003b33 	.word	0x08003b33
 80038c4:	08003b33 	.word	0x08003b33
 80038c8:	08003b33 	.word	0x08003b33
 80038cc:	08003b33 	.word	0x08003b33
 80038d0:	08003921 	.word	0x08003921
 80038d4:	08003b33 	.word	0x08003b33
 80038d8:	08003b33 	.word	0x08003b33
 80038dc:	08003b33 	.word	0x08003b33
 80038e0:	08003b33 	.word	0x08003b33
 80038e4:	08003b33 	.word	0x08003b33
 80038e8:	08003b33 	.word	0x08003b33
 80038ec:	08003b33 	.word	0x08003b33
 80038f0:	08003927 	.word	0x08003927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003900:	4b91      	ldr	r3, [pc, #580]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	4a90      	ldr	r2, [pc, #576]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003912:	e111      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003914:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003916:	61bb      	str	r3, [r7, #24]
      break;
 8003918:	e10e      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800391a:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800391c:	61bb      	str	r3, [r7, #24]
      break;
 800391e:	e10b      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003920:	4b8c      	ldr	r3, [pc, #560]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003922:	61bb      	str	r3, [r7, #24]
      break;
 8003924:	e108      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003930:	4b85      	ldr	r3, [pc, #532]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800393c:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003946:	4b80      	ldr	r3, [pc, #512]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80e1 	beq.w	8003b2c <HAL_RCC_GetSysClockFreq+0x2b8>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f000 8083 	beq.w	8003a78 <HAL_RCC_GetSysClockFreq+0x204>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f200 80a1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x248>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x114>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d056      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003986:	e099      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003988:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02d      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003994:	4b6c      	ldr	r3, [pc, #432]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	4a6b      	ldr	r2, [pc, #428]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039ee:	e087      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e8>
 80039fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a32:	e065      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a76:	e043      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aba:	e021      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003afe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b24:	ee17 3a90 	vmov	r3, s15
 8003b28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b2a:	e005      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
      break;
 8003b30:	e002      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b34:	61bb      	str	r3, [r7, #24]
      break;
 8003b36:	bf00      	nop
  }

  return sysclockfreq;
 8003b38:	69bb      	ldr	r3, [r7, #24]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	; 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	03d09000 	.word	0x03d09000
 8003b50:	003d0900 	.word	0x003d0900
 8003b54:	007a1200 	.word	0x007a1200
 8003b58:	46000000 	.word	0x46000000
 8003b5c:	4c742400 	.word	0x4c742400
 8003b60:	4a742400 	.word	0x4a742400
 8003b64:	4af42400 	.word	0x4af42400

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b6e:	f7ff fe81 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490f      	ldr	r1, [pc, #60]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ba4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	08008150 	.word	0x08008150
 8003bc0:	24000004 	.word	0x24000004
 8003bc4:	24000000 	.word	0x24000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bcc:	f7ff ffcc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	08008150 	.word	0x08008150

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003bf8:	f7ff ffb6 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	08008150 	.word	0x08008150

08003c20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b0c8      	sub	sp, #288	; 0x120
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003c44:	2500      	movs	r5, #0
 8003c46:	ea54 0305 	orrs.w	r3, r4, r5
 8003c4a:	d049      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c56:	d02f      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c5c:	d828      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c62:	d01a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c68:	d822      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c72:	d007      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c76:	4ba7      	ldr	r3, [pc, #668]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4aa6      	ldr	r2, [pc, #664]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c82:	e01a      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c88:	3308      	adds	r3, #8
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fa6d 	bl	800616c <RCCEx_PLL2_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c98:	e00f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9e:	3328      	adds	r3, #40	; 0x28
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 fb14 	bl	80062d0 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cc2:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd0:	4a90      	ldr	r2, [pc, #576]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003cec:	f04f 0900 	mov.w	r9, #0
 8003cf0:	ea58 0309 	orrs.w	r3, r8, r9
 8003cf4:	d047      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d82a      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d1d 	.word	0x08003d1d
 8003d0c:	08003d2b 	.word	0x08003d2b
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d5f 	.word	0x08003d5f
 8003d18:	08003d5f 	.word	0x08003d5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b7d      	ldr	r3, [pc, #500]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d28:	e01a      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	3308      	adds	r3, #8
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f002 fa1a 	bl	800616c <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d3e:	e00f      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d44:	3328      	adds	r3, #40	; 0x28
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 fac1 	bl	80062d0 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d68:	4b6a      	ldr	r3, [pc, #424]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f023 0107 	bic.w	r1, r3, #7
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4a67      	ldr	r2, [pc, #412]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6513      	str	r3, [r2, #80]	; 0x50
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d92:	f04f 0b00 	mov.w	fp, #0
 8003d96:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d9a:	d054      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003da6:	d036      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003da8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dac:	d82f      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db2:	d032      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db8:	d829      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dba:	2bc0      	cmp	r3, #192	; 0xc0
 8003dbc:	d02f      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc0:	d825      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dc2:	2b80      	cmp	r3, #128	; 0x80
 8003dc4:	d018      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d821      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d007      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a4e      	ldr	r2, [pc, #312]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003de0:	e01e      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de6:	3308      	adds	r3, #8
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 f9be 	bl	800616c <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003df6:	e013      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfc:	3328      	adds	r3, #40	; 0x28
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f002 fa65 	bl	80062d0 <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e28:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e3c:	e003      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003e52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d05c      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e70:	d03b      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e72:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e76:	d834      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7c:	d037      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e82:	d82e      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e88:	d033      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e8e:	d828      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d01a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d822      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d007      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003ea6:	e01c      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003eb4:	e01e      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eba:	3308      	adds	r3, #8
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f002 f954 	bl	800616c <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003eca:	e013      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f002 f9fb 	bl	80062d0 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d03a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	2b30      	cmp	r3, #48	; 0x30
 8003f48:	d01f      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f4a:	2b30      	cmp	r3, #48	; 0x30
 8003f4c:	d819      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d00c      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d815      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d111      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f5e:	4bae      	ldr	r3, [pc, #696]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4aad      	ldr	r2, [pc, #692]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f6a:	e011      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f70:	3308      	adds	r3, #8
 8003f72:	2102      	movs	r1, #2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f002 f8f9 	bl	800616c <RCCEx_PLL2_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f98:	4b9f      	ldr	r3, [pc, #636]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a9c      	ldr	r2, [pc, #624]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	d051      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe0:	d035      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe6:	d82e      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fec:	d031      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ff2:	d828      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d01a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffe:	d822      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	d007      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800400a:	e01c      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800400c:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a81      	ldr	r2, [pc, #516]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004018:	e01c      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	3308      	adds	r3, #8
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f002 f8a2 	bl	800616c <RCCEx_PLL2_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004034:	3328      	adds	r3, #40	; 0x28
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f002 f949 	bl	80062d0 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004044:	e006      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800405c:	4b6e      	ldr	r3, [pc, #440]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406a:	4a6b      	ldr	r2, [pc, #428]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800406c:	430b      	orrs	r3, r1
 800406e:	6513      	str	r3, [r2, #80]	; 0x50
 8004070:	e003      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004072:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004076:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800407a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004090:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d053      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a4:	d033      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80040a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040aa:	d82c      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040b0:	d02f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80040b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040b6:	d826      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040bc:	d02b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c2:	d820      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c8:	d012      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ce:	d81a      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d115      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040de:	3308      	adds	r3, #8
 80040e0:	2101      	movs	r1, #1
 80040e2:	4618      	mov	r0, r3
 80040e4:	f002 f842 	bl	800616c <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040ee:	e015      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	3328      	adds	r3, #40	; 0x28
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 f8e9 	bl	80062d0 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004104:	e00a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004124:	4b3c      	ldr	r3, [pc, #240]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004132:	4a39      	ldr	r2, [pc, #228]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6513      	str	r3, [r2, #80]	; 0x50
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800413e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800414e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004152:	2300      	movs	r3, #0
 8004154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004158:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800415c:	460b      	mov	r3, r1
 800415e:	4313      	orrs	r3, r2
 8004160:	d060      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800416a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800416e:	d039      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004170:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004174:	d832      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800417a:	d035      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004180:	d82c      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d031      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d826      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800418e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004192:	d02d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004194:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004198:	d820      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800419a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419e:	d012      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80041a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a4:	d81a      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d024      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ae:	d115      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	3308      	adds	r3, #8
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 ffd7 	bl	800616c <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c4:	e017      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f002 f87e 	bl	80062d0 <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041da:	e00c      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041e4:	bf00      	nop
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041e8:	bf00      	nop
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10e      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800420e:	4a02      	ldr	r2, [pc, #8]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	; 0x58
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004220:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800423a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d037      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800424a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424e:	d00e      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004254:	d816      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d018      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800425a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425e:	d111      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004260:	4bc4      	ldr	r3, [pc, #784]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4ac3      	ldr	r2, [pc, #780]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800426c:	e00f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004272:	3308      	adds	r3, #8
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f001 ff78 	bl	800616c <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004282:	e004      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004296:	4bb7      	ldr	r3, [pc, #732]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a4:	4ab3      	ldr	r2, [pc, #716]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6513      	str	r3, [r2, #80]	; 0x50
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d039      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d81c      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004321 	.word	0x08004321
 80042e8:	080042f5 	.word	0x080042f5
 80042ec:	08004303 	.word	0x08004303
 80042f0:	08004321 	.word	0x08004321
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4b9f      	ldr	r3, [pc, #636]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4a9e      	ldr	r2, [pc, #632]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004300:	e00f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	3308      	adds	r3, #8
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 ff2e 	bl	800616c <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004316:	e004      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004322:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800432a:	4b92      	ldr	r3, [pc, #584]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f023 0103 	bic.w	r1, r3, #3
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	4a8e      	ldr	r2, [pc, #568]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800433a:	430b      	orrs	r3, r1
 800433c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800435e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	f000 8099 	beq.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436a:	4b83      	ldr	r3, [pc, #524]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a82      	ldr	r2, [pc, #520]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004376:	f7fc ff79 	bl	800126c <HAL_GetTick>
 800437a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437e:	e00b      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004380:	f7fc ff74 	bl	800126c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	; 0x64
 800438e:	d903      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004396:	e005      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004398:	4b77      	ldr	r3, [pc, #476]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ed      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80043a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d173      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043ac:	4b71      	ldr	r3, [pc, #452]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043b8:	4053      	eors	r3, r2
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d015      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c2:	4b6c      	ldr	r3, [pc, #432]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ce:	4b69      	ldr	r3, [pc, #420]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a68      	ldr	r2, [pc, #416]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043da:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a65      	ldr	r2, [pc, #404]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043e6:	4a63      	ldr	r2, [pc, #396]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d118      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fc ff36 	bl	800126c <HAL_GetTick>
 8004400:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004404:	e00d      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fc ff31 	bl	800126c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	f241 3388 	movw	r3, #5000	; 0x1388
 8004416:	429a      	cmp	r2, r3
 8004418:	d903      	bls.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004420:	e005      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0eb      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800442e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004432:	2b00      	cmp	r3, #0
 8004434:	d129      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004446:	d10e      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004448:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004458:	091a      	lsrs	r2, r3, #4
 800445a:	4b48      	ldr	r3, [pc, #288]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800445c:	4013      	ands	r3, r2
 800445e:	4a45      	ldr	r2, [pc, #276]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6113      	str	r3, [r2, #16]
 8004464:	e005      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004470:	6113      	str	r3, [r2, #16]
 8004472:	4b40      	ldr	r3, [pc, #256]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004474:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800448a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800448e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004492:	e003      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004498:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f002 0301 	and.w	r3, r2, #1
 80044a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f000 8090 	beq.w	80045de <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	2b28      	cmp	r3, #40	; 0x28
 80044c8:	d870      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080045b5 	.word	0x080045b5
 80044d4:	080045ad 	.word	0x080045ad
 80044d8:	080045ad 	.word	0x080045ad
 80044dc:	080045ad 	.word	0x080045ad
 80044e0:	080045ad 	.word	0x080045ad
 80044e4:	080045ad 	.word	0x080045ad
 80044e8:	080045ad 	.word	0x080045ad
 80044ec:	080045ad 	.word	0x080045ad
 80044f0:	08004581 	.word	0x08004581
 80044f4:	080045ad 	.word	0x080045ad
 80044f8:	080045ad 	.word	0x080045ad
 80044fc:	080045ad 	.word	0x080045ad
 8004500:	080045ad 	.word	0x080045ad
 8004504:	080045ad 	.word	0x080045ad
 8004508:	080045ad 	.word	0x080045ad
 800450c:	080045ad 	.word	0x080045ad
 8004510:	08004597 	.word	0x08004597
 8004514:	080045ad 	.word	0x080045ad
 8004518:	080045ad 	.word	0x080045ad
 800451c:	080045ad 	.word	0x080045ad
 8004520:	080045ad 	.word	0x080045ad
 8004524:	080045ad 	.word	0x080045ad
 8004528:	080045ad 	.word	0x080045ad
 800452c:	080045ad 	.word	0x080045ad
 8004530:	080045b5 	.word	0x080045b5
 8004534:	080045ad 	.word	0x080045ad
 8004538:	080045ad 	.word	0x080045ad
 800453c:	080045ad 	.word	0x080045ad
 8004540:	080045ad 	.word	0x080045ad
 8004544:	080045ad 	.word	0x080045ad
 8004548:	080045ad 	.word	0x080045ad
 800454c:	080045ad 	.word	0x080045ad
 8004550:	080045b5 	.word	0x080045b5
 8004554:	080045ad 	.word	0x080045ad
 8004558:	080045ad 	.word	0x080045ad
 800455c:	080045ad 	.word	0x080045ad
 8004560:	080045ad 	.word	0x080045ad
 8004564:	080045ad 	.word	0x080045ad
 8004568:	080045ad 	.word	0x080045ad
 800456c:	080045ad 	.word	0x080045ad
 8004570:	080045b5 	.word	0x080045b5
 8004574:	58024400 	.word	0x58024400
 8004578:	58024800 	.word	0x58024800
 800457c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004584:	3308      	adds	r3, #8
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fdef 	bl	800616c <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459a:	3328      	adds	r3, #40	; 0x28
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fe96 	bl	80062d0 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045be:	4bc0      	ldr	r3, [pc, #768]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ce:	4abc      	ldr	r2, [pc, #752]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6553      	str	r3, [r2, #84]	; 0x54
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f002 0302 	and.w	r3, r2, #2
 80045ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045f4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d043      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004606:	2b05      	cmp	r3, #5
 8004608:	d824      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	0800465d 	.word	0x0800465d
 8004614:	08004629 	.word	0x08004629
 8004618:	0800463f 	.word	0x0800463f
 800461c:	0800465d 	.word	0x0800465d
 8004620:	0800465d 	.word	0x0800465d
 8004624:	0800465d 	.word	0x0800465d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	3308      	adds	r3, #8
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f001 fd9b 	bl	800616c <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800463c:	e00f      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800463e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004642:	3328      	adds	r3, #40	; 0x28
 8004644:	2101      	movs	r1, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f001 fe42 	bl	80062d0 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004652:	e004      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800465a:	e000      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800465c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004666:	4b96      	ldr	r3, [pc, #600]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f023 0107 	bic.w	r1, r3, #7
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004676:	4a92      	ldr	r2, [pc, #584]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6553      	str	r3, [r2, #84]	; 0x54
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004682:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f002 0304 	and.w	r3, r2, #4
 8004692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800469c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d043      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d824      	bhi.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	08004705 	.word	0x08004705
 80046bc:	080046d1 	.word	0x080046d1
 80046c0:	080046e7 	.word	0x080046e7
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	3308      	adds	r3, #8
 80046d6:	2101      	movs	r1, #1
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fd47 	bl	800616c <RCCEx_PLL2_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046e4:	e00f      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ea:	3328      	adds	r3, #40	; 0x28
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 fdee 	bl	80062d0 <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004706:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800470e:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f023 0107 	bic.w	r1, r3, #7
 8004716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471e:	4a68      	ldr	r2, [pc, #416]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004720:	430b      	orrs	r3, r1
 8004722:	6593      	str	r3, [r2, #88]	; 0x58
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800472a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f002 0320 	and.w	r3, r2, #32
 800473a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d055      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800474e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800475a:	d033      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800475c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004760:	d82c      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d02f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d826      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800476e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004772:	d02b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004778:	d820      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477e:	d012      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	d81a      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d022      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478e:	d115      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004794:	3308      	adds	r3, #8
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fce7 	bl	800616c <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047a4:	e015      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	3328      	adds	r3, #40	; 0x28
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 fd8e 	bl	80062d0 <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047ba:	e00a      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047c2:	e006      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047c4:	bf00      	nop
 80047c6:	e004      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047c8:	bf00      	nop
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ea:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6553      	str	r3, [r2, #84]	; 0x54
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004810:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d058      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800481a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004822:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004826:	d033      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004828:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800482c:	d82c      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d02f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d826      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800483a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800483e:	d02b      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004844:	d820      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484a:	d012      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	d81a      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d022      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485a:	d115      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800485c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004860:	3308      	adds	r3, #8
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fc81 	bl	800616c <RCCEx_PLL2_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004870:	e015      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	3328      	adds	r3, #40	; 0x28
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fd28 	bl	80062d0 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004886:	e00a      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800488e:	e006      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004890:	bf00      	nop
 8004892:	e004      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800489c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048b6:	4a02      	ldr	r2, [pc, #8]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
 80048bc:	e006      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048e6:	460b      	mov	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	d055      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048f8:	d033      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048fe:	d82c      	bhi.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	d02f      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d826      	bhi.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800490c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004910:	d02b      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004912:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004916:	d820      	bhi.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d012      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800491e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004922:	d81a      	bhi.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d115      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	3308      	adds	r3, #8
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f001 fc18 	bl	800616c <RCCEx_PLL2_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004942:	e015      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	3328      	adds	r3, #40	; 0x28
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fcbf 	bl	80062d0 <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004958:	e00a      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800496e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004978:	4ba1      	ldr	r3, [pc, #644]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004984:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004988:	4a9d      	ldr	r2, [pc, #628]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6593      	str	r3, [r2, #88]	; 0x58
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004994:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 0308 	and.w	r3, r2, #8
 80049a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	d01e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ca:	3328      	adds	r3, #40	; 0x28
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 fc7e 	bl	80062d0 <RCCEx_PLL3_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049e0:	4b87      	ldr	r3, [pc, #540]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	4a83      	ldr	r2, [pc, #524]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f002 0310 	and.w	r3, r2, #16
 8004a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d01e      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a28:	3328      	adds	r3, #40	; 0x28
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 fc4f 	bl	80062d0 <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a3e:	4b70      	ldr	r3, [pc, #448]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a4e:	4a6c      	ldr	r2, [pc, #432]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4313      	orrs	r3, r2
 8004a72:	d03e      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d022      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a86:	d81b      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a92:	e015      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	3308      	adds	r3, #8
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 fb65 	bl	800616c <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aa8:	e00f      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aae:	3328      	adds	r3, #40	; 0x28
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fc0c 	bl	80062d0 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ae2:	4a47      	ldr	r2, [pc, #284]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b00:	2300      	movs	r3, #0
 8004b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d03b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b1a:	d01f      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b20:	d818      	bhi.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d003      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b2c:	d007      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b2e:	e011      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b3c:	e00f      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b42:	3328      	adds	r3, #40	; 0x28
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fbc2 	bl	80062d0 <RCCEx_PLL3_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b52:	e004      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6553      	str	r3, [r2, #84]	; 0x54
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b92:	673b      	str	r3, [r7, #112]	; 0x70
 8004b94:	2300      	movs	r3, #0
 8004b96:	677b      	str	r3, [r7, #116]	; 0x74
 8004b98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d034      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d007      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bc0:	e00e      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	2102      	movs	r1, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 face 	bl	800616c <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	4a02      	ldr	r2, [pc, #8]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2c:	3328      	adds	r3, #40	; 0x28
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 fb4d 	bl	80062d0 <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c50:	2300      	movs	r3, #0
 8004c52:	667b      	str	r3, [r7, #100]	; 0x64
 8004c54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d038      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c6a:	d018      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c70:	d811      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d014      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d80b      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d106      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c88:	4bc3      	ldr	r3, [pc, #780]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4ac2      	ldr	r2, [pc, #776]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c9c:	e004      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb0:	4bb9      	ldr	r3, [pc, #740]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	4ab5      	ldr	r2, [pc, #724]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	6553      	str	r3, [r2, #84]	; 0x54
 8004cc6:	e003      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ccc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cde:	2300      	movs	r3, #0
 8004ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cec:	4baa      	ldr	r3, [pc, #680]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfa:	4aa7      	ldr	r2, [pc, #668]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d0e:	2300      	movs	r3, #0
 8004d10:	657b      	str	r3, [r7, #84]	; 0x54
 8004d12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d16:	460b      	mov	r3, r1
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d1c:	4b9e      	ldr	r3, [pc, #632]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d20:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	4a9b      	ldr	r2, [pc, #620]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d3e:	2300      	movs	r3, #0
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d46:	460b      	mov	r3, r1
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d4c:	4b92      	ldr	r3, [pc, #584]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	4a8f      	ldr	r2, [pc, #572]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d6e:	2300      	movs	r3, #0
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d7c:	4b86      	ldr	r3, [pc, #536]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	4a85      	ldr	r2, [pc, #532]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d86:	6113      	str	r3, [r2, #16]
 8004d88:	4b83      	ldr	r3, [pc, #524]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d8a:	6919      	ldr	r1, [r3, #16]
 8004d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d94:	4a80      	ldr	r2, [pc, #512]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d96:	430b      	orrs	r3, r1
 8004d98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004da8:	2300      	movs	r3, #0
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004db6:	4b78      	ldr	r3, [pc, #480]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	4a74      	ldr	r2, [pc, #464]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd8:	2300      	movs	r3, #0
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004de0:	460b      	mov	r3, r1
 8004de2:	4313      	orrs	r3, r2
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004de6:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df6:	4a68      	ldr	r2, [pc, #416]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	2100      	movs	r1, #0
 8004e06:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e12:	460b      	mov	r3, r1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	d011      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f9a3 	bl	800616c <RCCEx_PLL2_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	2100      	movs	r1, #0
 8004e46:	6239      	str	r1, [r7, #32]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e52:	460b      	mov	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d011      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f983 	bl	800616c <RCCEx_PLL2_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	2100      	movs	r1, #0
 8004e86:	61b9      	str	r1, [r7, #24]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d011      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f963 	bl	800616c <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004eac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	6139      	str	r1, [r7, #16]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d011      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	3328      	adds	r3, #40	; 0x28
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 f9f5 	bl	80062d0 <RCCEx_PLL3_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ef8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	2100      	movs	r1, #0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d011      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1c:	3328      	adds	r3, #40	; 0x28
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 f9d5 	bl	80062d0 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	2100      	movs	r1, #0
 8004f46:	6039      	str	r1, [r7, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d011      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5c:	3328      	adds	r3, #40	; 0x28
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f001 f9b5 	bl	80062d0 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f7c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f90:	46bd      	mov	sp, r7
 8004f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f96:	bf00      	nop
 8004f98:	58024400 	.word	0x58024400

08004f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b090      	sub	sp, #64	; 0x40
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004faa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	f040 8094 	bne.w	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004fb4:	4b97      	ldr	r3, [pc, #604]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	f200 8087 	bhi.w	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fe1 	.word	0x08004fe1
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	08005031 	.word	0x08005031
 8004fd8:	080050cd 	.word	0x080050cd
 8004fdc:	08005059 	.word	0x08005059
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fe0:	4b8c      	ldr	r3, [pc, #560]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fec:	d108      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 ff68 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ffc:	f000 bc97 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005004:	f000 bc93 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005008:	4b82      	ldr	r3, [pc, #520]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005014:	d108      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005016:	f107 0318 	add.w	r3, r7, #24
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fcac 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005024:	f000 bc83 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502c:	f000 bc7f 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005030:	4b78      	ldr	r3, [pc, #480]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800503c:	d108      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fdec 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800504c:	f000 bc6f 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005054:	f000 bc6b 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005058:	4b6e      	ldr	r3, [pc, #440]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005060:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005062:	4b6c      	ldr	r3, [pc, #432]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b04      	cmp	r3, #4
 800506c:	d10c      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005074:	4b67      	ldr	r3, [pc, #412]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	4a66      	ldr	r2, [pc, #408]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005086:	e01f      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005088:	4b62      	ldr	r3, [pc, #392]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005094:	d106      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509c:	d102      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800509e:	4b5f      	ldr	r3, [pc, #380]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a2:	e011      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050a4:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b0:	d106      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b8:	d102      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050ba:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80050c4:	f000 bc33 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80050c8:	f000 bc31 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80050cc:	4b55      	ldr	r3, [pc, #340]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d0:	f000 bc2d 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d8:	f000 bc29 	b.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80050dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80050e4:	430b      	orrs	r3, r1
 80050e6:	f040 809f 	bne.w	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fa:	d04d      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005102:	f200 8084 	bhi.w	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	2bc0      	cmp	r3, #192	; 0xc0
 800510a:	d07d      	beq.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2bc0      	cmp	r3, #192	; 0xc0
 8005110:	d87d      	bhi.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d02d      	beq.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d877      	bhi.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d012      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800512a:	e070      	b.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800512c:	4b39      	ldr	r3, [pc, #228]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005138:	d107      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800513a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fec2 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005148:	e3f1      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800514e:	e3ee      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005150:	4b30      	ldr	r3, [pc, #192]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515c:	d107      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515e:	f107 0318 	add.w	r3, r7, #24
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fc08 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800516c:	e3df      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005172:	e3dc      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005174:	4b27      	ldr	r3, [pc, #156]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800517c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005180:	d107      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005182:	f107 030c 	add.w	r3, r7, #12
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fd4a 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005190:	e3cd      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005196:	e3ca      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	4a16      	ldr	r2, [pc, #88]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c6:	e01e      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d4:	d106      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051dc:	d102      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e2:	e010      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f0:	d106      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f8:	d102      	bne.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005204:	e393      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005206:	e392      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800520c:	e38f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005212:	e38c      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005214:	58024400 	.word	0x58024400
 8005218:	03d09000 	.word	0x03d09000
 800521c:	003d0900 	.word	0x003d0900
 8005220:	007a1200 	.word	0x007a1200
 8005224:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005230:	430b      	orrs	r3, r1
 8005232:	f040 809c 	bne.w	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005236:	4b9e      	ldr	r3, [pc, #632]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800523e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005246:	d054      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	f200 808b 	bhi.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005258:	f000 8083 	beq.w	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005262:	f200 8081 	bhi.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d02f      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005274:	d878      	bhi.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005282:	d012      	beq.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005284:	e070      	b.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005286:	4b8a      	ldr	r3, [pc, #552]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005292:	d107      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fe15 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a2:	e344      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052a8:	e341      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052aa:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b6:	d107      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b8:	f107 0318 	add.w	r3, r7, #24
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fb5b 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052c6:	e332      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052cc:	e32f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052ce:	4b78      	ldr	r3, [pc, #480]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052da:	d107      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052dc:	f107 030c 	add.w	r3, r7, #12
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fc9d 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052ea:	e320      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f0:	e31d      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052f2:	4b6f      	ldr	r3, [pc, #444]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052fc:	4b6c      	ldr	r3, [pc, #432]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d10c      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800530e:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	4a66      	ldr	r2, [pc, #408]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800531a:	fa22 f303 	lsr.w	r3, r2, r3
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005320:	e01e      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	d106      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005336:	d102      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005338:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	e010      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800533e:	4b5c      	ldr	r3, [pc, #368]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534a:	d106      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005352:	d102      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005354:	4b59      	ldr	r3, [pc, #356]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	e002      	b.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800535e:	e2e6      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005360:	e2e5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005362:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005366:	e2e2      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536c:	e2df      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800536e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005372:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005376:	430b      	orrs	r3, r1
 8005378:	f040 80a7 	bne.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800537c:	4b4c      	ldr	r3, [pc, #304]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538c:	d055      	beq.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005394:	f200 8096 	bhi.w	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800539e:	f000 8084 	beq.w	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053a8:	f200 808c 	bhi.w	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	d030      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ba:	f200 8083 	bhi.w	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d012      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80053cc:	e07a      	b.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053da:	d107      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fd71 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053ea:	e2a0      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f0:	e29d      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fe:	d107      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005400:	f107 0318 	add.w	r3, r7, #24
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fab7 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800540e:	e28e      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005414:	e28b      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d107      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fbf9 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005432:	e27c      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005438:	e279      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800543a:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005442:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d10c      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005456:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005468:	e01e      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d106      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547e:	d102      	bne.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005480:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005484:	e010      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005492:	d106      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549a:	d102      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a0:	e002      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80054a6:	e242      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80054a8:	e241      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ae:	e23e      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80054b0:	58024400 	.word	0x58024400
 80054b4:	03d09000 	.word	0x03d09000
 80054b8:	003d0900 	.word	0x003d0900
 80054bc:	007a1200 	.word	0x007a1200
 80054c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c8:	e231      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ce:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80054d2:	430b      	orrs	r3, r1
 80054d4:	f040 8085 	bne.w	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80054d8:	4b9c      	ldr	r3, [pc, #624]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e8:	d06b      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d874      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f8:	d056      	beq.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005500:	d86c      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005508:	d03b      	beq.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005510:	d864      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005518:	d021      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005520:	d85c      	bhi.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552e:	d004      	beq.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005530:	e054      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005532:	f7fe fb49 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005538:	e1f9      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800553a:	4b84      	ldr	r3, [pc, #528]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005546:	d107      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005548:	f107 0318 	add.w	r3, r7, #24
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fa13 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005556:	e1ea      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800555c:	e1e7      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800555e:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556a:	d107      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556c:	f107 030c 	add.w	r3, r7, #12
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fb55 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800557a:	e1d8      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005580:	e1d5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005582:	4b72      	ldr	r3, [pc, #456]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d109      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800558e:	4b6f      	ldr	r3, [pc, #444]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	4a6d      	ldr	r2, [pc, #436]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055a0:	e1c5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a6:	e1c2      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055a8:	4b68      	ldr	r3, [pc, #416]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d102      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ba:	e1b8      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	e1b5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055c2:	4b62      	ldr	r3, [pc, #392]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ce:	d102      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80055d0:	4b61      	ldr	r3, [pc, #388]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055d4:	e1ab      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055da:	e1a8      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e0:	e1a5      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80055e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80055ea:	430b      	orrs	r3, r1
 80055ec:	d173      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80055ee:	4b57      	ldr	r3, [pc, #348]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fe:	d02f      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005606:	d863      	bhi.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005614:	d012      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005616:	e05b      	b.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005618:	4b4c      	ldr	r3, [pc, #304]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005624:	d107      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005626:	f107 0318 	add.w	r3, r7, #24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f9a4 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005634:	e17b      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563a:	e178      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800563c:	4b43      	ldr	r3, [pc, #268]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005648:	d107      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800564a:	f107 030c 	add.w	r3, r7, #12
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fae6 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005658:	e169      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800565e:	e166      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005660:	4b3a      	ldr	r3, [pc, #232]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005668:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800566a:	4b38      	ldr	r3, [pc, #224]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b04      	cmp	r3, #4
 8005674:	d10c      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800567c:	4b33      	ldr	r3, [pc, #204]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	4a32      	ldr	r2, [pc, #200]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568e:	e01e      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005690:	4b2e      	ldr	r3, [pc, #184]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569c:	d106      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056a4:	d102      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056a6:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056aa:	e010      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b8:	d106      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c0:	d102      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80056cc:	e12f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80056ce:	e12e      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d4:	e12b      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056da:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80056de:	430b      	orrs	r3, r1
 80056e0:	d13c      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80056e2:	4b1a      	ldr	r3, [pc, #104]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d012      	beq.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80056fa:	e023      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005708:	d107      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800570a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fbda 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005718:	e109      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800571e:	e106      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572c:	d107      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572e:	f107 0318 	add.w	r3, r7, #24
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f920 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800573c:	e0f7      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005742:	e0f4      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005748:	e0f1      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800574a:	bf00      	nop
 800574c:	58024400 	.word	0x58024400
 8005750:	03d09000 	.word	0x03d09000
 8005754:	003d0900 	.word	0x003d0900
 8005758:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800575c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005760:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005764:	430b      	orrs	r3, r1
 8005766:	f040 8091 	bne.w	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800576a:	4b73      	ldr	r3, [pc, #460]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800577a:	f000 8081 	beq.w	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005784:	d87f      	bhi.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578c:	d06b      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005794:	d877      	bhi.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d056      	beq.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a4:	d86f      	bhi.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ac:	d03b      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057b4:	d867      	bhi.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057bc:	d021      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c4:	d85f      	bhi.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d2:	d004      	beq.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80057d4:	e057      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80057d6:	f000 f8b9 	bl	800594c <HAL_RCCEx_GetD3PCLK1Freq>
 80057da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057dc:	e0a7      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ea:	d107      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ec:	f107 0318 	add.w	r3, r7, #24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f8c1 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057fa:	e098      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005800:	e095      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005802:	4b4d      	ldr	r3, [pc, #308]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800580e:	d107      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fa03 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800581e:	e086      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005824:	e083      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005826:	4b44      	ldr	r3, [pc, #272]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d109      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005832:	4b41      	ldr	r3, [pc, #260]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	08db      	lsrs	r3, r3, #3
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	4a3f      	ldr	r2, [pc, #252]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005844:	e073      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584a:	e070      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800584c:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005858:	d102      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585e:	e066      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005864:	e063      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005866:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005874:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005878:	e059      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587e:	e056      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005880:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e053      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800588a:	e050      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800588c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005890:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005894:	430b      	orrs	r3, r1
 8005896:	d148      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005898:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d02a      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b0:	d838      	bhi.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058be:	d00d      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80058c0:	e030      	b.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058c2:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ce:	d102      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058d4:	e02b      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058da:	e028      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e8:	d107      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 faea 	bl	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f8:	e019      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058fe:	e016      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590c:	d107      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800590e:	f107 0318 	add.w	r3, r7, #24
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f830 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800591c:	e007      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005928:	e001      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800592e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005930:	4618      	mov	r0, r3
 8005932:	3740      	adds	r7, #64	; 0x40
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	58024400 	.word	0x58024400
 800593c:	03d09000 	.word	0x03d09000
 8005940:	003d0900 	.word	0x003d0900
 8005944:	007a1200 	.word	0x007a1200
 8005948:	00bb8000 	.word	0x00bb8000

0800594c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005950:	f7fe f90a 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4904      	ldr	r1, [pc, #16]	; (8005974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800596c:	4618      	mov	r0, r3
 800596e:	bd80      	pop	{r7, pc}
 8005970:	58024400 	.word	0x58024400
 8005974:	08008150 	.word	0x08008150

08005978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005980:	4ba1      	ldr	r3, [pc, #644]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800598a:	4b9f      	ldr	r3, [pc, #636]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	0b1b      	lsrs	r3, r3, #12
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005996:	4b9c      	ldr	r3, [pc, #624]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80059a2:	4b99      	ldr	r3, [pc, #612]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8111 	beq.w	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f000 8083 	beq.w	8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f200 80a1 	bhi.w	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d056      	beq.n	8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059e2:	e099      	b.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e4:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02d      	beq.n	8005a4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059f0:	4b85      	ldr	r3, [pc, #532]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	4a84      	ldr	r2, [pc, #528]	; (8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a4a:	e087      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a8e:	e065      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ad2:	e043      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b16:	e021      	b.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b37      	ldr	r3, [pc, #220]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b82:	ee17 2a90 	vmov	r2, s15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb0:	ee17 2a90 	vmov	r2, s15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bde:	ee17 2a90 	vmov	r2, s15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005be6:	e008      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	03d09000 	.word	0x03d09000
 8005c10:	46000000 	.word	0x46000000
 8005c14:	4c742400 	.word	0x4c742400
 8005c18:	4a742400 	.word	0x4a742400
 8005c1c:	4af42400 	.word	0x4af42400

08005c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c28:	4ba1      	ldr	r3, [pc, #644]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c32:	4b9f      	ldr	r3, [pc, #636]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	0d1b      	lsrs	r3, r3, #20
 8005c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c3e:	4b9c      	ldr	r3, [pc, #624]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c4a:	4b99      	ldr	r3, [pc, #612]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8111 	beq.w	8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	f000 8083 	beq.w	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	f200 80a1 	bhi.w	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d056      	beq.n	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c8a:	e099      	b.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c8c:	4b88      	ldr	r3, [pc, #544]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02d      	beq.n	8005cf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c98:	4b85      	ldr	r3, [pc, #532]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	08db      	lsrs	r3, r3, #3
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	4a84      	ldr	r2, [pc, #528]	; (8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b7b      	ldr	r3, [pc, #492]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cf2:	e087      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d36:	e065      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b59      	ldr	r3, [pc, #356]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7a:	e043      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b48      	ldr	r3, [pc, #288]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dbe:	e021      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b37      	ldr	r3, [pc, #220]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e04:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	0a5b      	lsrs	r3, r3, #9
 8005e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2a:	ee17 2a90 	vmov	r2, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e58:	ee17 2a90 	vmov	r2, s15
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e60:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	0e1b      	lsrs	r3, r3, #24
 8005e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e86:	ee17 2a90 	vmov	r2, s15
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	609a      	str	r2, [r3, #8]
}
 8005ea2:	bf00      	nop
 8005ea4:	3724      	adds	r7, #36	; 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	03d09000 	.word	0x03d09000
 8005eb8:	46000000 	.word	0x46000000
 8005ebc:	4c742400 	.word	0x4c742400
 8005ec0:	4a742400 	.word	0x4a742400
 8005ec4:	4af42400 	.word	0x4af42400

08005ec8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ed0:	4ba0      	ldr	r3, [pc, #640]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005eda:	4b9e      	ldr	r3, [pc, #632]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ee6:	4b9b      	ldr	r3, [pc, #620]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ef0:	4b98      	ldr	r3, [pc, #608]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	fb02 f303 	mul.w	r3, r2, r3
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8111 	beq.w	8006136 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	f000 8083 	beq.w	8006022 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	f200 80a1 	bhi.w	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d056      	beq.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005f30:	e099      	b.n	8006066 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f32:	4b88      	ldr	r3, [pc, #544]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02d      	beq.n	8005f9a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f3e:	4b85      	ldr	r3, [pc, #532]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	4a83      	ldr	r2, [pc, #524]	; (8006158 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f68:	4b7a      	ldr	r3, [pc, #488]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f98:	e087      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	4b69      	ldr	r3, [pc, #420]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fdc:	e065      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006164 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff0:	4b58      	ldr	r3, [pc, #352]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	ed97 6a03 	vldr	s12, [r7, #12]
 8006004:	eddf 5a55 	vldr	s11, [pc, #340]	; 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006020:	e043      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006168 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006034:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	ed97 6a03 	vldr	s12, [r7, #12]
 8006048:	eddf 5a44 	vldr	s11, [pc, #272]	; 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800604c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006064:	e021      	b.n	80060aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006160 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006088:	ed97 6a03 	vldr	s12, [r7, #12]
 800608c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800615c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	0a5b      	lsrs	r3, r3, #9
 80060b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d0:	ee17 2a90 	vmov	r2, s15
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80060d8:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fe:	ee17 2a90 	vmov	r2, s15
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	0e1b      	lsrs	r3, r3, #24
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006120:	edd7 6a07 	vldr	s13, [r7, #28]
 8006124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 2a90 	vmov	r2, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006134:	e008      	b.n	8006148 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3724      	adds	r7, #36	; 0x24
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	58024400 	.word	0x58024400
 8006158:	03d09000 	.word	0x03d09000
 800615c:	46000000 	.word	0x46000000
 8006160:	4c742400 	.word	0x4c742400
 8006164:	4a742400 	.word	0x4a742400
 8006168:	4af42400 	.word	0x4af42400

0800616c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800617a:	4b53      	ldr	r3, [pc, #332]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d101      	bne.n	800618a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e099      	b.n	80062be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800618a:	4b4f      	ldr	r3, [pc, #316]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4e      	ldr	r2, [pc, #312]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006196:	f7fb f869 	bl	800126c <HAL_GetTick>
 800619a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800619c:	e008      	b.n	80061b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800619e:	f7fb f865 	bl	800126c <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e086      	b.n	80062be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061b0:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061bc:	4b42      	ldr	r3, [pc, #264]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	493f      	ldr	r1, [pc, #252]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	628b      	str	r3, [r1, #40]	; 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	3b01      	subs	r3, #1
 80061e0:	025b      	lsls	r3, r3, #9
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006200:	4931      	ldr	r1, [pc, #196]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006206:	4b30      	ldr	r3, [pc, #192]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	492d      	ldr	r1, [pc, #180]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006218:	4b2b      	ldr	r3, [pc, #172]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f023 0220 	bic.w	r2, r3, #32
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	4928      	ldr	r1, [pc, #160]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800622a:	4b27      	ldr	r3, [pc, #156]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006230:	f023 0310 	bic.w	r3, r3, #16
 8006234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <RCCEx_PLL2_Config+0x160>)
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	69d2      	ldr	r2, [r2, #28]
 8006242:	00d2      	lsls	r2, r2, #3
 8006244:	4920      	ldr	r1, [pc, #128]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800624a:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006250:	f043 0310 	orr.w	r3, r3, #16
 8006254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006268:	e00f      	b.n	800628a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d106      	bne.n	800627e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006270:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	4a14      	ldr	r2, [pc, #80]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800627a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800627c:	e005      	b.n	800628a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006288:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0e      	ldr	r2, [pc, #56]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 8006290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006296:	f7fa ffe9 	bl	800126c <HAL_GetTick>
 800629a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800629c:	e008      	b.n	80062b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800629e:	f7fa ffe5 	bl	800126c <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e006      	b.n	80062be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <RCCEx_PLL2_Config+0x15c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
 80062cc:	ffff0007 	.word	0xffff0007

080062d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062de:	4b53      	ldr	r3, [pc, #332]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d101      	bne.n	80062ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e099      	b.n	8006422 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062ee:	4b4f      	ldr	r3, [pc, #316]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4e      	ldr	r2, [pc, #312]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80062f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fa:	f7fa ffb7 	bl	800126c <HAL_GetTick>
 80062fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006300:	e008      	b.n	8006314 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006302:	f7fa ffb3 	bl	800126c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e086      	b.n	8006422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006314:	4b45      	ldr	r3, [pc, #276]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006320:	4b42      	ldr	r3, [pc, #264]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	051b      	lsls	r3, r3, #20
 800632e:	493f      	ldr	r1, [pc, #252]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	628b      	str	r3, [r1, #40]	; 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	3b01      	subs	r3, #1
 800633a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	3b01      	subs	r3, #1
 8006344:	025b      	lsls	r3, r3, #9
 8006346:	b29b      	uxth	r3, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	3b01      	subs	r3, #1
 800635e:	061b      	lsls	r3, r3, #24
 8006360:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006364:	4931      	ldr	r1, [pc, #196]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800636a:	4b30      	ldr	r3, [pc, #192]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	492d      	ldr	r1, [pc, #180]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006378:	4313      	orrs	r3, r2
 800637a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800637c:	4b2b      	ldr	r3, [pc, #172]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	4928      	ldr	r1, [pc, #160]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 800638a:	4313      	orrs	r3, r2
 800638c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800638e:	4b27      	ldr	r3, [pc, #156]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	4a26      	ldr	r2, [pc, #152]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800639a:	4b24      	ldr	r3, [pc, #144]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 800639c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <RCCEx_PLL3_Config+0x160>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	69d2      	ldr	r2, [r2, #28]
 80063a6:	00d2      	lsls	r2, r2, #3
 80063a8:	4920      	ldr	r1, [pc, #128]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063ae:	4b1f      	ldr	r3, [pc, #124]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a1e      	ldr	r2, [pc, #120]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063c0:	4b1a      	ldr	r3, [pc, #104]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	4a19      	ldr	r2, [pc, #100]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063cc:	e00f      	b.n	80063ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d106      	bne.n	80063e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063e0:	e005      	b.n	80063ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a11      	ldr	r2, [pc, #68]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063fa:	f7fa ff37 	bl	800126c <HAL_GetTick>
 80063fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006400:	e008      	b.n	8006414 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006402:	f7fa ff33 	bl	800126c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e006      	b.n	8006422 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <RCCEx_PLL3_Config+0x15c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	58024400 	.word	0x58024400
 8006430:	ffff0007 	.word	0xffff0007

08006434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e042      	b.n	80064cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fa fd15 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2224      	movs	r2, #36	; 0x24
 8006462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f82c 	bl	80064d4 <UART_SetConfig>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e022      	b.n	80064cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fe8c 	bl	80071ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff13 	bl	80072f0 <UART_CheckIdleState>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b092      	sub	sp, #72	; 0x48
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4bbe      	ldr	r3, [pc, #760]	; (80067fc <UART_SetConfig+0x328>)
 8006504:	4013      	ands	r3, r2
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800650c:	430b      	orrs	r3, r1
 800650e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4ab3      	ldr	r2, [pc, #716]	; (8006800 <UART_SetConfig+0x32c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653c:	4313      	orrs	r3, r2
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	4baf      	ldr	r3, [pc, #700]	; (8006804 <UART_SetConfig+0x330>)
 8006548:	4013      	ands	r3, r2
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006550:	430b      	orrs	r3, r1
 8006552:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	f023 010f 	bic.w	r1, r3, #15
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4aa6      	ldr	r2, [pc, #664]	; (8006808 <UART_SetConfig+0x334>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d177      	bne.n	8006664 <UART_SetConfig+0x190>
 8006574:	4ba5      	ldr	r3, [pc, #660]	; (800680c <UART_SetConfig+0x338>)
 8006576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657c:	2b28      	cmp	r3, #40	; 0x28
 800657e:	d86d      	bhi.n	800665c <UART_SetConfig+0x188>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <UART_SetConfig+0xb4>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	0800662d 	.word	0x0800662d
 800658c:	0800665d 	.word	0x0800665d
 8006590:	0800665d 	.word	0x0800665d
 8006594:	0800665d 	.word	0x0800665d
 8006598:	0800665d 	.word	0x0800665d
 800659c:	0800665d 	.word	0x0800665d
 80065a0:	0800665d 	.word	0x0800665d
 80065a4:	0800665d 	.word	0x0800665d
 80065a8:	08006635 	.word	0x08006635
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	0800665d 	.word	0x0800665d
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800665d 	.word	0x0800665d
 80065c0:	0800665d 	.word	0x0800665d
 80065c4:	0800665d 	.word	0x0800665d
 80065c8:	0800663d 	.word	0x0800663d
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	0800665d 	.word	0x0800665d
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	0800665d 	.word	0x0800665d
 80065e0:	0800665d 	.word	0x0800665d
 80065e4:	0800665d 	.word	0x0800665d
 80065e8:	08006645 	.word	0x08006645
 80065ec:	0800665d 	.word	0x0800665d
 80065f0:	0800665d 	.word	0x0800665d
 80065f4:	0800665d 	.word	0x0800665d
 80065f8:	0800665d 	.word	0x0800665d
 80065fc:	0800665d 	.word	0x0800665d
 8006600:	0800665d 	.word	0x0800665d
 8006604:	0800665d 	.word	0x0800665d
 8006608:	0800664d 	.word	0x0800664d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800665d 	.word	0x0800665d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	0800665d 	.word	0x0800665d
 8006624:	0800665d 	.word	0x0800665d
 8006628:	08006655 	.word	0x08006655
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e326      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006634:	2304      	movs	r3, #4
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e322      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800663c:	2308      	movs	r3, #8
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e31e      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006644:	2310      	movs	r3, #16
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e31a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800664c:	2320      	movs	r3, #32
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e316      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e312      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e30e      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a69      	ldr	r2, [pc, #420]	; (8006810 <UART_SetConfig+0x33c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d130      	bne.n	80066d0 <UART_SetConfig+0x1fc>
 800666e:	4b67      	ldr	r3, [pc, #412]	; (800680c <UART_SetConfig+0x338>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b05      	cmp	r3, #5
 8006678:	d826      	bhi.n	80066c8 <UART_SetConfig+0x1f4>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <UART_SetConfig+0x1ac>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	08006699 	.word	0x08006699
 8006684:	080066a1 	.word	0x080066a1
 8006688:	080066a9 	.word	0x080066a9
 800668c:	080066b1 	.word	0x080066b1
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066c1 	.word	0x080066c1
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e2f0      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066a0:	2304      	movs	r3, #4
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e2ec      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066a8:	2308      	movs	r3, #8
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e2e8      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e2e4      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066b8:	2320      	movs	r3, #32
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e2e0      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066c0:	2340      	movs	r3, #64	; 0x40
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e2dc      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e2d8      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a4f      	ldr	r2, [pc, #316]	; (8006814 <UART_SetConfig+0x340>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d130      	bne.n	800673c <UART_SetConfig+0x268>
 80066da:	4b4c      	ldr	r3, [pc, #304]	; (800680c <UART_SetConfig+0x338>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d826      	bhi.n	8006734 <UART_SetConfig+0x260>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x218>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006705 	.word	0x08006705
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	08006715 	.word	0x08006715
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	08006725 	.word	0x08006725
 8006700:	0800672d 	.word	0x0800672d
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e2ba      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e2b6      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e2b2      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e2ae      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006724:	2320      	movs	r3, #32
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e2aa      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800672c:	2340      	movs	r3, #64	; 0x40
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e2a6      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e2a2      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a35      	ldr	r2, [pc, #212]	; (8006818 <UART_SetConfig+0x344>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d130      	bne.n	80067a8 <UART_SetConfig+0x2d4>
 8006746:	4b31      	ldr	r3, [pc, #196]	; (800680c <UART_SetConfig+0x338>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	2b05      	cmp	r3, #5
 8006750:	d826      	bhi.n	80067a0 <UART_SetConfig+0x2cc>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0x284>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	08006771 	.word	0x08006771
 800675c:	08006779 	.word	0x08006779
 8006760:	08006781 	.word	0x08006781
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e284      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006778:	2304      	movs	r3, #4
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e280      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006780:	2308      	movs	r3, #8
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e27c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006788:	2310      	movs	r3, #16
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e278      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006790:	2320      	movs	r3, #32
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e274      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e270      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e26c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	; (800681c <UART_SetConfig+0x348>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d142      	bne.n	8006838 <UART_SetConfig+0x364>
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <UART_SetConfig+0x338>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d838      	bhi.n	8006830 <UART_SetConfig+0x35c>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x2f0>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067e5 	.word	0x080067e5
 80067cc:	080067ed 	.word	0x080067ed
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	08006821 	.word	0x08006821
 80067d8:	08006829 	.word	0x08006829
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e24e      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e24a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e246      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fa:	e242      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80067fc:	cfff69f3 	.word	0xcfff69f3
 8006800:	58000c00 	.word	0x58000c00
 8006804:	11fff4ff 	.word	0x11fff4ff
 8006808:	40011000 	.word	0x40011000
 800680c:	58024400 	.word	0x58024400
 8006810:	40004400 	.word	0x40004400
 8006814:	40004800 	.word	0x40004800
 8006818:	40004c00 	.word	0x40004c00
 800681c:	40005000 	.word	0x40005000
 8006820:	2320      	movs	r3, #32
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e22c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e228      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e224      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4ab1      	ldr	r2, [pc, #708]	; (8006b04 <UART_SetConfig+0x630>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d176      	bne.n	8006930 <UART_SetConfig+0x45c>
 8006842:	4bb1      	ldr	r3, [pc, #708]	; (8006b08 <UART_SetConfig+0x634>)
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800684a:	2b28      	cmp	r3, #40	; 0x28
 800684c:	d86c      	bhi.n	8006928 <UART_SetConfig+0x454>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <UART_SetConfig+0x380>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	080068f9 	.word	0x080068f9
 8006858:	08006929 	.word	0x08006929
 800685c:	08006929 	.word	0x08006929
 8006860:	08006929 	.word	0x08006929
 8006864:	08006929 	.word	0x08006929
 8006868:	08006929 	.word	0x08006929
 800686c:	08006929 	.word	0x08006929
 8006870:	08006929 	.word	0x08006929
 8006874:	08006901 	.word	0x08006901
 8006878:	08006929 	.word	0x08006929
 800687c:	08006929 	.word	0x08006929
 8006880:	08006929 	.word	0x08006929
 8006884:	08006929 	.word	0x08006929
 8006888:	08006929 	.word	0x08006929
 800688c:	08006929 	.word	0x08006929
 8006890:	08006929 	.word	0x08006929
 8006894:	08006909 	.word	0x08006909
 8006898:	08006929 	.word	0x08006929
 800689c:	08006929 	.word	0x08006929
 80068a0:	08006929 	.word	0x08006929
 80068a4:	08006929 	.word	0x08006929
 80068a8:	08006929 	.word	0x08006929
 80068ac:	08006929 	.word	0x08006929
 80068b0:	08006929 	.word	0x08006929
 80068b4:	08006911 	.word	0x08006911
 80068b8:	08006929 	.word	0x08006929
 80068bc:	08006929 	.word	0x08006929
 80068c0:	08006929 	.word	0x08006929
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006929 	.word	0x08006929
 80068cc:	08006929 	.word	0x08006929
 80068d0:	08006929 	.word	0x08006929
 80068d4:	08006919 	.word	0x08006919
 80068d8:	08006929 	.word	0x08006929
 80068dc:	08006929 	.word	0x08006929
 80068e0:	08006929 	.word	0x08006929
 80068e4:	08006929 	.word	0x08006929
 80068e8:	08006929 	.word	0x08006929
 80068ec:	08006929 	.word	0x08006929
 80068f0:	08006929 	.word	0x08006929
 80068f4:	08006921 	.word	0x08006921
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e1c0      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e1bc      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690e:	e1b8      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e1b4      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006918:	2320      	movs	r3, #32
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e1b0      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e1ac      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e1a8      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a75      	ldr	r2, [pc, #468]	; (8006b0c <UART_SetConfig+0x638>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d130      	bne.n	800699c <UART_SetConfig+0x4c8>
 800693a:	4b73      	ldr	r3, [pc, #460]	; (8006b08 <UART_SetConfig+0x634>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b05      	cmp	r3, #5
 8006944:	d826      	bhi.n	8006994 <UART_SetConfig+0x4c0>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x478>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006965 	.word	0x08006965
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006975 	.word	0x08006975
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696a:	e18a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006972:	e186      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697a:	e182      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e17e      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006984:	2320      	movs	r3, #32
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e17a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e176      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e172      	b.n	8006c82 <UART_SetConfig+0x7ae>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a5b      	ldr	r2, [pc, #364]	; (8006b10 <UART_SetConfig+0x63c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d130      	bne.n	8006a08 <UART_SetConfig+0x534>
 80069a6:	4b58      	ldr	r3, [pc, #352]	; (8006b08 <UART_SetConfig+0x634>)
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d826      	bhi.n	8006a00 <UART_SetConfig+0x52c>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x4e4>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069e1 	.word	0x080069e1
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069f9 	.word	0x080069f9
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d6:	e154      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069de:	e150      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e6:	e14c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ee:	e148      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80069f0:	2320      	movs	r3, #32
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f6:	e144      	b.n	8006c82 <UART_SetConfig+0x7ae>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fe:	e140      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e13c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a41      	ldr	r2, [pc, #260]	; (8006b14 <UART_SetConfig+0x640>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	f040 8082 	bne.w	8006b18 <UART_SetConfig+0x644>
 8006a14:	4b3c      	ldr	r3, [pc, #240]	; (8006b08 <UART_SetConfig+0x634>)
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a1c:	2b28      	cmp	r3, #40	; 0x28
 8006a1e:	d86d      	bhi.n	8006afc <UART_SetConfig+0x628>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x554>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006acd 	.word	0x08006acd
 8006a2c:	08006afd 	.word	0x08006afd
 8006a30:	08006afd 	.word	0x08006afd
 8006a34:	08006afd 	.word	0x08006afd
 8006a38:	08006afd 	.word	0x08006afd
 8006a3c:	08006afd 	.word	0x08006afd
 8006a40:	08006afd 	.word	0x08006afd
 8006a44:	08006afd 	.word	0x08006afd
 8006a48:	08006ad5 	.word	0x08006ad5
 8006a4c:	08006afd 	.word	0x08006afd
 8006a50:	08006afd 	.word	0x08006afd
 8006a54:	08006afd 	.word	0x08006afd
 8006a58:	08006afd 	.word	0x08006afd
 8006a5c:	08006afd 	.word	0x08006afd
 8006a60:	08006afd 	.word	0x08006afd
 8006a64:	08006afd 	.word	0x08006afd
 8006a68:	08006add 	.word	0x08006add
 8006a6c:	08006afd 	.word	0x08006afd
 8006a70:	08006afd 	.word	0x08006afd
 8006a74:	08006afd 	.word	0x08006afd
 8006a78:	08006afd 	.word	0x08006afd
 8006a7c:	08006afd 	.word	0x08006afd
 8006a80:	08006afd 	.word	0x08006afd
 8006a84:	08006afd 	.word	0x08006afd
 8006a88:	08006ae5 	.word	0x08006ae5
 8006a8c:	08006afd 	.word	0x08006afd
 8006a90:	08006afd 	.word	0x08006afd
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006afd 	.word	0x08006afd
 8006aa0:	08006afd 	.word	0x08006afd
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006afd 	.word	0x08006afd
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006afd 	.word	0x08006afd
 8006ab8:	08006afd 	.word	0x08006afd
 8006abc:	08006afd 	.word	0x08006afd
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006afd 	.word	0x08006afd
 8006ac8:	08006af5 	.word	0x08006af5
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad2:	e0d6      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ada:	e0d2      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ae2:	e0ce      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e0ca      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006aec:	2320      	movs	r3, #32
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e0c6      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006af4:	2340      	movs	r3, #64	; 0x40
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e0c2      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e0be      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006b04:	40011400 	.word	0x40011400
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	40007800 	.word	0x40007800
 8006b10:	40007c00 	.word	0x40007c00
 8006b14:	40011800 	.word	0x40011800
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4aad      	ldr	r2, [pc, #692]	; (8006dd4 <UART_SetConfig+0x900>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d176      	bne.n	8006c10 <UART_SetConfig+0x73c>
 8006b22:	4bad      	ldr	r3, [pc, #692]	; (8006dd8 <UART_SetConfig+0x904>)
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2a:	2b28      	cmp	r3, #40	; 0x28
 8006b2c:	d86c      	bhi.n	8006c08 <UART_SetConfig+0x734>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x660>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006bd9 	.word	0x08006bd9
 8006b38:	08006c09 	.word	0x08006c09
 8006b3c:	08006c09 	.word	0x08006c09
 8006b40:	08006c09 	.word	0x08006c09
 8006b44:	08006c09 	.word	0x08006c09
 8006b48:	08006c09 	.word	0x08006c09
 8006b4c:	08006c09 	.word	0x08006c09
 8006b50:	08006c09 	.word	0x08006c09
 8006b54:	08006be1 	.word	0x08006be1
 8006b58:	08006c09 	.word	0x08006c09
 8006b5c:	08006c09 	.word	0x08006c09
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c09 	.word	0x08006c09
 8006b68:	08006c09 	.word	0x08006c09
 8006b6c:	08006c09 	.word	0x08006c09
 8006b70:	08006c09 	.word	0x08006c09
 8006b74:	08006be9 	.word	0x08006be9
 8006b78:	08006c09 	.word	0x08006c09
 8006b7c:	08006c09 	.word	0x08006c09
 8006b80:	08006c09 	.word	0x08006c09
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006c09 	.word	0x08006c09
 8006b8c:	08006c09 	.word	0x08006c09
 8006b90:	08006c09 	.word	0x08006c09
 8006b94:	08006bf1 	.word	0x08006bf1
 8006b98:	08006c09 	.word	0x08006c09
 8006b9c:	08006c09 	.word	0x08006c09
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006c09 	.word	0x08006c09
 8006ba8:	08006c09 	.word	0x08006c09
 8006bac:	08006c09 	.word	0x08006c09
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006bf9 	.word	0x08006bf9
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006c09 	.word	0x08006c09
 8006bc0:	08006c09 	.word	0x08006c09
 8006bc4:	08006c09 	.word	0x08006c09
 8006bc8:	08006c09 	.word	0x08006c09
 8006bcc:	08006c09 	.word	0x08006c09
 8006bd0:	08006c09 	.word	0x08006c09
 8006bd4:	08006c01 	.word	0x08006c01
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e050      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006be0:	2304      	movs	r3, #4
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e04c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006be8:	2308      	movs	r3, #8
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bee:	e048      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e044      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e040      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c06:	e03c      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e038      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a71      	ldr	r2, [pc, #452]	; (8006ddc <UART_SetConfig+0x908>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d130      	bne.n	8006c7c <UART_SetConfig+0x7a8>
 8006c1a:	4b6f      	ldr	r3, [pc, #444]	; (8006dd8 <UART_SetConfig+0x904>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d826      	bhi.n	8006c74 <UART_SetConfig+0x7a0>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x758>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c6d 	.word	0x08006c6d
 8006c44:	2302      	movs	r3, #2
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e01a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e016      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e012      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e00e      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c64:	2320      	movs	r3, #32
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e00a      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e006      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e002      	b.n	8006c82 <UART_SetConfig+0x7ae>
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a55      	ldr	r2, [pc, #340]	; (8006ddc <UART_SetConfig+0x908>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	f040 80f8 	bne.w	8006e7e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	dc46      	bgt.n	8006d24 <UART_SetConfig+0x850>
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	db75      	blt.n	8006d86 <UART_SetConfig+0x8b2>
 8006c9a:	3b02      	subs	r3, #2
 8006c9c:	2b1e      	cmp	r3, #30
 8006c9e:	d872      	bhi.n	8006d86 <UART_SetConfig+0x8b2>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x7d4>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006d2b 	.word	0x08006d2b
 8006cac:	08006d87 	.word	0x08006d87
 8006cb0:	08006d33 	.word	0x08006d33
 8006cb4:	08006d87 	.word	0x08006d87
 8006cb8:	08006d87 	.word	0x08006d87
 8006cbc:	08006d87 	.word	0x08006d87
 8006cc0:	08006d43 	.word	0x08006d43
 8006cc4:	08006d87 	.word	0x08006d87
 8006cc8:	08006d87 	.word	0x08006d87
 8006ccc:	08006d87 	.word	0x08006d87
 8006cd0:	08006d87 	.word	0x08006d87
 8006cd4:	08006d87 	.word	0x08006d87
 8006cd8:	08006d87 	.word	0x08006d87
 8006cdc:	08006d87 	.word	0x08006d87
 8006ce0:	08006d53 	.word	0x08006d53
 8006ce4:	08006d87 	.word	0x08006d87
 8006ce8:	08006d87 	.word	0x08006d87
 8006cec:	08006d87 	.word	0x08006d87
 8006cf0:	08006d87 	.word	0x08006d87
 8006cf4:	08006d87 	.word	0x08006d87
 8006cf8:	08006d87 	.word	0x08006d87
 8006cfc:	08006d87 	.word	0x08006d87
 8006d00:	08006d87 	.word	0x08006d87
 8006d04:	08006d87 	.word	0x08006d87
 8006d08:	08006d87 	.word	0x08006d87
 8006d0c:	08006d87 	.word	0x08006d87
 8006d10:	08006d87 	.word	0x08006d87
 8006d14:	08006d87 	.word	0x08006d87
 8006d18:	08006d87 	.word	0x08006d87
 8006d1c:	08006d87 	.word	0x08006d87
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d02a      	beq.n	8006d7e <UART_SetConfig+0x8aa>
 8006d28:	e02d      	b.n	8006d86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d2a:	f7fe fe0f 	bl	800594c <HAL_RCCEx_GetD3PCLK1Freq>
 8006d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d30:	e02f      	b.n	8006d92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe fe1e 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d40:	e027      	b.n	8006d92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d42:	f107 0318 	add.w	r3, r7, #24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe ff6a 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	e01f      	b.n	8006d92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d52:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <UART_SetConfig+0x904>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d5e:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <UART_SetConfig+0x904>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <UART_SetConfig+0x90c>)
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d70:	e00f      	b.n	8006d92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <UART_SetConfig+0x90c>)
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d76:	e00c      	b.n	8006d92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d78:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <UART_SetConfig+0x910>)
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e009      	b.n	8006d92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d84:	e005      	b.n	8006d92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 81ee 	beq.w	8007176 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <UART_SetConfig+0x914>)
 8006da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4413      	add	r3, r2
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d305      	bcc.n	8006dca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d910      	bls.n	8006dec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dd0:	e1d1      	b.n	8007176 <UART_SetConfig+0xca2>
 8006dd2:	bf00      	nop
 8006dd4:	40011c00 	.word	0x40011c00
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	58000c00 	.word	0x58000c00
 8006de0:	03d09000 	.word	0x03d09000
 8006de4:	003d0900 	.word	0x003d0900
 8006de8:	08008160 	.word	0x08008160
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	2200      	movs	r2, #0
 8006df0:	60bb      	str	r3, [r7, #8]
 8006df2:	60fa      	str	r2, [r7, #12]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	4ac0      	ldr	r2, [pc, #768]	; (80070fc <UART_SetConfig+0xc28>)
 8006dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2200      	movs	r2, #0
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e0e:	f7f9 fabf 	bl	8000390 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	020b      	lsls	r3, r1, #8
 8006e24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e28:	0202      	lsls	r2, r0, #8
 8006e2a:	6979      	ldr	r1, [r7, #20]
 8006e2c:	6849      	ldr	r1, [r1, #4]
 8006e2e:	0849      	lsrs	r1, r1, #1
 8006e30:	2000      	movs	r0, #0
 8006e32:	460c      	mov	r4, r1
 8006e34:	4605      	mov	r5, r0
 8006e36:	eb12 0804 	adds.w	r8, r2, r4
 8006e3a:	eb43 0905 	adc.w	r9, r3, r5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	469a      	mov	sl, r3
 8006e46:	4693      	mov	fp, r2
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 fa9e 	bl	8000390 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4613      	mov	r3, r2
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e62:	d308      	bcc.n	8006e76 <UART_SetConfig+0x9a2>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d204      	bcs.n	8006e76 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e17f      	b.n	8007176 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e7c:	e17b      	b.n	8007176 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e86:	f040 80bd 	bne.w	8007004 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	dc48      	bgt.n	8006f24 <UART_SetConfig+0xa50>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	db7b      	blt.n	8006f8e <UART_SetConfig+0xaba>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d879      	bhi.n	8006f8e <UART_SetConfig+0xaba>
 8006e9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x9cc>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006f2b 	.word	0x08006f2b
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f8f 	.word	0x08006f8f
 8006eac:	08006f8f 	.word	0x08006f8f
 8006eb0:	08006f3b 	.word	0x08006f3b
 8006eb4:	08006f8f 	.word	0x08006f8f
 8006eb8:	08006f8f 	.word	0x08006f8f
 8006ebc:	08006f8f 	.word	0x08006f8f
 8006ec0:	08006f4b 	.word	0x08006f4b
 8006ec4:	08006f8f 	.word	0x08006f8f
 8006ec8:	08006f8f 	.word	0x08006f8f
 8006ecc:	08006f8f 	.word	0x08006f8f
 8006ed0:	08006f8f 	.word	0x08006f8f
 8006ed4:	08006f8f 	.word	0x08006f8f
 8006ed8:	08006f8f 	.word	0x08006f8f
 8006edc:	08006f8f 	.word	0x08006f8f
 8006ee0:	08006f5b 	.word	0x08006f5b
 8006ee4:	08006f8f 	.word	0x08006f8f
 8006ee8:	08006f8f 	.word	0x08006f8f
 8006eec:	08006f8f 	.word	0x08006f8f
 8006ef0:	08006f8f 	.word	0x08006f8f
 8006ef4:	08006f8f 	.word	0x08006f8f
 8006ef8:	08006f8f 	.word	0x08006f8f
 8006efc:	08006f8f 	.word	0x08006f8f
 8006f00:	08006f8f 	.word	0x08006f8f
 8006f04:	08006f8f 	.word	0x08006f8f
 8006f08:	08006f8f 	.word	0x08006f8f
 8006f0c:	08006f8f 	.word	0x08006f8f
 8006f10:	08006f8f 	.word	0x08006f8f
 8006f14:	08006f8f 	.word	0x08006f8f
 8006f18:	08006f8f 	.word	0x08006f8f
 8006f1c:	08006f8f 	.word	0x08006f8f
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d02e      	beq.n	8006f86 <UART_SetConfig+0xab2>
 8006f28:	e031      	b.n	8006f8e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2a:	f7fc fe4d 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8006f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f30:	e033      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f32:	f7fc fe5f 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8006f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f38:	e02f      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fd1a 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e027      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f4a:	f107 0318 	add.w	r3, r7, #24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fe66 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f58:	e01f      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5a:	4b69      	ldr	r3, [pc, #420]	; (8007100 <UART_SetConfig+0xc2c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f66:	4b66      	ldr	r3, [pc, #408]	; (8007100 <UART_SetConfig+0xc2c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	4a64      	ldr	r2, [pc, #400]	; (8007104 <UART_SetConfig+0xc30>)
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f78:	e00f      	b.n	8006f9a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f7a:	4b62      	ldr	r3, [pc, #392]	; (8007104 <UART_SetConfig+0xc30>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7e:	e00c      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f80:	4b61      	ldr	r3, [pc, #388]	; (8007108 <UART_SetConfig+0xc34>)
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e009      	b.n	8006f9a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80ea 	beq.w	8007176 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	4a55      	ldr	r2, [pc, #340]	; (80070fc <UART_SetConfig+0xc28>)
 8006fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb4:	005a      	lsls	r2, r3, #1
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	441a      	add	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	2b0f      	cmp	r3, #15
 8006fcc:	d916      	bls.n	8006ffc <UART_SetConfig+0xb28>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd4:	d212      	bcs.n	8006ffc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f023 030f 	bic.w	r3, r3, #15
 8006fde:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ff8:	60da      	str	r2, [r3, #12]
 8006ffa:	e0bc      	b.n	8007176 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007002:	e0b8      	b.n	8007176 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007004:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007008:	2b20      	cmp	r3, #32
 800700a:	dc4b      	bgt.n	80070a4 <UART_SetConfig+0xbd0>
 800700c:	2b00      	cmp	r3, #0
 800700e:	f2c0 8087 	blt.w	8007120 <UART_SetConfig+0xc4c>
 8007012:	2b20      	cmp	r3, #32
 8007014:	f200 8084 	bhi.w	8007120 <UART_SetConfig+0xc4c>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0xb4c>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	080070ab 	.word	0x080070ab
 8007024:	080070b3 	.word	0x080070b3
 8007028:	08007121 	.word	0x08007121
 800702c:	08007121 	.word	0x08007121
 8007030:	080070bb 	.word	0x080070bb
 8007034:	08007121 	.word	0x08007121
 8007038:	08007121 	.word	0x08007121
 800703c:	08007121 	.word	0x08007121
 8007040:	080070cb 	.word	0x080070cb
 8007044:	08007121 	.word	0x08007121
 8007048:	08007121 	.word	0x08007121
 800704c:	08007121 	.word	0x08007121
 8007050:	08007121 	.word	0x08007121
 8007054:	08007121 	.word	0x08007121
 8007058:	08007121 	.word	0x08007121
 800705c:	08007121 	.word	0x08007121
 8007060:	080070db 	.word	0x080070db
 8007064:	08007121 	.word	0x08007121
 8007068:	08007121 	.word	0x08007121
 800706c:	08007121 	.word	0x08007121
 8007070:	08007121 	.word	0x08007121
 8007074:	08007121 	.word	0x08007121
 8007078:	08007121 	.word	0x08007121
 800707c:	08007121 	.word	0x08007121
 8007080:	08007121 	.word	0x08007121
 8007084:	08007121 	.word	0x08007121
 8007088:	08007121 	.word	0x08007121
 800708c:	08007121 	.word	0x08007121
 8007090:	08007121 	.word	0x08007121
 8007094:	08007121 	.word	0x08007121
 8007098:	08007121 	.word	0x08007121
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007113 	.word	0x08007113
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d037      	beq.n	8007118 <UART_SetConfig+0xc44>
 80070a8:	e03a      	b.n	8007120 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070aa:	f7fc fd8d 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 80070ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070b0:	e03c      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b2:	f7fc fd9f 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 80070b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070b8:	e038      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fc5a 	bl	8005978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c8:	e030      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ca:	f107 0318 	add.w	r3, r7, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fda6 	bl	8005c20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d8:	e028      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <UART_SetConfig+0xc2c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d012      	beq.n	800710c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <UART_SetConfig+0xc2c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	4a04      	ldr	r2, [pc, #16]	; (8007104 <UART_SetConfig+0xc30>)
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f8:	e018      	b.n	800712c <UART_SetConfig+0xc58>
 80070fa:	bf00      	nop
 80070fc:	08008160 	.word	0x08008160
 8007100:	58024400 	.word	0x58024400
 8007104:	03d09000 	.word	0x03d09000
 8007108:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <UART_SetConfig+0xccc>)
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007110:	e00c      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <UART_SetConfig+0xcd0>)
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007116:	e009      	b.n	800712c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800711e:	e005      	b.n	800712c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800712a:	bf00      	nop
    }

    if (pclk != 0U)
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d021      	beq.n	8007176 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <UART_SetConfig+0xcd4>)
 8007138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800713c:	461a      	mov	r2, r3
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	fbb3 f2f2 	udiv	r2, r3, r2
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	441a      	add	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	fbb2 f3f3 	udiv	r3, r2, r3
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	2b0f      	cmp	r3, #15
 800715a:	d909      	bls.n	8007170 <UART_SetConfig+0xc9c>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007162:	d205      	bcs.n	8007170 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	b29a      	uxth	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e002      	b.n	8007176 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2201      	movs	r2, #1
 800717a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2201      	movs	r2, #1
 8007182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007192:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007196:	4618      	mov	r0, r3
 8007198:	3748      	adds	r7, #72	; 0x48
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	003d0900 	.word	0x003d0900
 80071a8:	08008160 	.word	0x08008160

080071ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072aa:	d10a      	bne.n	80072c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b098      	sub	sp, #96	; 0x60
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007300:	f7f9 ffb4 	bl	800126c <HAL_GetTick>
 8007304:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d12f      	bne.n	8007374 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f88e 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d022      	beq.n	8007374 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800733c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
 800734e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800735a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e063      	b.n	800743c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d149      	bne.n	8007416 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800738a:	2200      	movs	r2, #0
 800738c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f857 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d03c      	beq.n	8007416 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	623b      	str	r3, [r7, #32]
   return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ba:	633b      	str	r3, [r7, #48]	; 0x30
 80073bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ee:	61fa      	str	r2, [r7, #28]
 80073f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	617b      	str	r3, [r7, #20]
   return(result);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e012      	b.n	800743c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3758      	adds	r7, #88	; 0x58
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007454:	e049      	b.n	80074ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d045      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7f9 ff05 	bl	800126c <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <UART_WaitOnFlagUntilTimeout+0x30>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e048      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d031      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d110      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2208      	movs	r2, #8
 800749a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f839 	bl	8007514 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2208      	movs	r2, #8
 80074a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e029      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c4:	d111      	bne.n	80074ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f81f 	bl	8007514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e00f      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4013      	ands	r3, r2
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	429a      	cmp	r2, r3
 8007506:	d0a6      	beq.n	8007456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b095      	sub	sp, #84	; 0x54
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753a:	643b      	str	r3, [r7, #64]	; 0x40
 800753c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	61fb      	str	r3, [r7, #28]
   return(result);
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <UART_EndRxTransfer+0xc8>)
 8007562:	4013      	ands	r3, r2
 8007564:	64bb      	str	r3, [r7, #72]	; 0x48
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800756e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007586:	2b01      	cmp	r3, #1
 8007588:	d118      	bne.n	80075bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60bb      	str	r3, [r7, #8]
   return(result);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0310 	bic.w	r3, r3, #16
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6979      	ldr	r1, [r7, #20]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075d0:	bf00      	nop
 80075d2:	3754      	adds	r7, #84	; 0x54
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	effffffe 	.word	0xeffffffe

080075e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e027      	b.n	8007646 <HAL_UARTEx_DisableFifoMode+0x66>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007624:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007666:	2302      	movs	r3, #2
 8007668:	e02d      	b.n	80076c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	; 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f850 	bl	800774c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e02d      	b.n	8007742 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2224      	movs	r2, #36	; 0x24
 80076f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f812 	bl	800774c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007758:	2b00      	cmp	r3, #0
 800775a:	d108      	bne.n	800776e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800776c:	e031      	b.n	80077d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800776e:	2310      	movs	r3, #16
 8007770:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007772:	2310      	movs	r3, #16
 8007774:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	0e5b      	lsrs	r3, r3, #25
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	0f5b      	lsrs	r3, r3, #29
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	7b3a      	ldrb	r2, [r7, #12]
 800779a:	4911      	ldr	r1, [pc, #68]	; (80077e0 <UARTEx_SetNbDataToProcess+0x94>)
 800779c:	5c8a      	ldrb	r2, [r1, r2]
 800779e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077a2:	7b3a      	ldrb	r2, [r7, #12]
 80077a4:	490f      	ldr	r1, [pc, #60]	; (80077e4 <UARTEx_SetNbDataToProcess+0x98>)
 80077a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	7b7a      	ldrb	r2, [r7, #13]
 80077b8:	4909      	ldr	r1, [pc, #36]	; (80077e0 <UARTEx_SetNbDataToProcess+0x94>)
 80077ba:	5c8a      	ldrb	r2, [r1, r2]
 80077bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077c0:	7b7a      	ldrb	r2, [r7, #13]
 80077c2:	4908      	ldr	r1, [pc, #32]	; (80077e4 <UARTEx_SetNbDataToProcess+0x98>)
 80077c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	08008178 	.word	0x08008178
 80077e4:	08008180 	.word	0x08008180

080077e8 <siprintf>:
 80077e8:	b40e      	push	{r1, r2, r3}
 80077ea:	b500      	push	{lr}
 80077ec:	b09c      	sub	sp, #112	; 0x70
 80077ee:	ab1d      	add	r3, sp, #116	; 0x74
 80077f0:	9002      	str	r0, [sp, #8]
 80077f2:	9006      	str	r0, [sp, #24]
 80077f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077f8:	4809      	ldr	r0, [pc, #36]	; (8007820 <siprintf+0x38>)
 80077fa:	9107      	str	r1, [sp, #28]
 80077fc:	9104      	str	r1, [sp, #16]
 80077fe:	4909      	ldr	r1, [pc, #36]	; (8007824 <siprintf+0x3c>)
 8007800:	f853 2b04 	ldr.w	r2, [r3], #4
 8007804:	9105      	str	r1, [sp, #20]
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	a902      	add	r1, sp, #8
 800780c:	f000 f992 	bl	8007b34 <_svfiprintf_r>
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	b01c      	add	sp, #112	; 0x70
 8007818:	f85d eb04 	ldr.w	lr, [sp], #4
 800781c:	b003      	add	sp, #12
 800781e:	4770      	bx	lr
 8007820:	2400005c 	.word	0x2400005c
 8007824:	ffff0208 	.word	0xffff0208

08007828 <memset>:
 8007828:	4402      	add	r2, r0
 800782a:	4603      	mov	r3, r0
 800782c:	4293      	cmp	r3, r2
 800782e:	d100      	bne.n	8007832 <memset+0xa>
 8007830:	4770      	bx	lr
 8007832:	f803 1b01 	strb.w	r1, [r3], #1
 8007836:	e7f9      	b.n	800782c <memset+0x4>

08007838 <__errno>:
 8007838:	4b01      	ldr	r3, [pc, #4]	; (8007840 <__errno+0x8>)
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2400005c 	.word	0x2400005c

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4d0d      	ldr	r5, [pc, #52]	; (800787c <__libc_init_array+0x38>)
 8007848:	4c0d      	ldr	r4, [pc, #52]	; (8007880 <__libc_init_array+0x3c>)
 800784a:	1b64      	subs	r4, r4, r5
 800784c:	10a4      	asrs	r4, r4, #2
 800784e:	2600      	movs	r6, #0
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	4d0b      	ldr	r5, [pc, #44]	; (8007884 <__libc_init_array+0x40>)
 8007856:	4c0c      	ldr	r4, [pc, #48]	; (8007888 <__libc_init_array+0x44>)
 8007858:	f000 fc6a 	bl	8008130 <_init>
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	2600      	movs	r6, #0
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	f855 3b04 	ldr.w	r3, [r5], #4
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	f855 3b04 	ldr.w	r3, [r5], #4
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	080081c4 	.word	0x080081c4
 8007880:	080081c4 	.word	0x080081c4
 8007884:	080081c4 	.word	0x080081c4
 8007888:	080081c8 	.word	0x080081c8

0800788c <__retarget_lock_acquire_recursive>:
 800788c:	4770      	bx	lr

0800788e <__retarget_lock_release_recursive>:
 800788e:	4770      	bx	lr

08007890 <_free_r>:
 8007890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007892:	2900      	cmp	r1, #0
 8007894:	d044      	beq.n	8007920 <_free_r+0x90>
 8007896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789a:	9001      	str	r0, [sp, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f1a1 0404 	sub.w	r4, r1, #4
 80078a2:	bfb8      	it	lt
 80078a4:	18e4      	addlt	r4, r4, r3
 80078a6:	f000 f8df 	bl	8007a68 <__malloc_lock>
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <_free_r+0x94>)
 80078ac:	9801      	ldr	r0, [sp, #4]
 80078ae:	6813      	ldr	r3, [r2, #0]
 80078b0:	b933      	cbnz	r3, 80078c0 <_free_r+0x30>
 80078b2:	6063      	str	r3, [r4, #4]
 80078b4:	6014      	str	r4, [r2, #0]
 80078b6:	b003      	add	sp, #12
 80078b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078bc:	f000 b8da 	b.w	8007a74 <__malloc_unlock>
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	d908      	bls.n	80078d6 <_free_r+0x46>
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	1961      	adds	r1, r4, r5
 80078c8:	428b      	cmp	r3, r1
 80078ca:	bf01      	itttt	eq
 80078cc:	6819      	ldreq	r1, [r3, #0]
 80078ce:	685b      	ldreq	r3, [r3, #4]
 80078d0:	1949      	addeq	r1, r1, r5
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	e7ed      	b.n	80078b2 <_free_r+0x22>
 80078d6:	461a      	mov	r2, r3
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b10b      	cbz	r3, 80078e0 <_free_r+0x50>
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d9fa      	bls.n	80078d6 <_free_r+0x46>
 80078e0:	6811      	ldr	r1, [r2, #0]
 80078e2:	1855      	adds	r5, r2, r1
 80078e4:	42a5      	cmp	r5, r4
 80078e6:	d10b      	bne.n	8007900 <_free_r+0x70>
 80078e8:	6824      	ldr	r4, [r4, #0]
 80078ea:	4421      	add	r1, r4
 80078ec:	1854      	adds	r4, r2, r1
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	6011      	str	r1, [r2, #0]
 80078f2:	d1e0      	bne.n	80078b6 <_free_r+0x26>
 80078f4:	681c      	ldr	r4, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	6053      	str	r3, [r2, #4]
 80078fa:	440c      	add	r4, r1
 80078fc:	6014      	str	r4, [r2, #0]
 80078fe:	e7da      	b.n	80078b6 <_free_r+0x26>
 8007900:	d902      	bls.n	8007908 <_free_r+0x78>
 8007902:	230c      	movs	r3, #12
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	e7d6      	b.n	80078b6 <_free_r+0x26>
 8007908:	6825      	ldr	r5, [r4, #0]
 800790a:	1961      	adds	r1, r4, r5
 800790c:	428b      	cmp	r3, r1
 800790e:	bf04      	itt	eq
 8007910:	6819      	ldreq	r1, [r3, #0]
 8007912:	685b      	ldreq	r3, [r3, #4]
 8007914:	6063      	str	r3, [r4, #4]
 8007916:	bf04      	itt	eq
 8007918:	1949      	addeq	r1, r1, r5
 800791a:	6021      	streq	r1, [r4, #0]
 800791c:	6054      	str	r4, [r2, #4]
 800791e:	e7ca      	b.n	80078b6 <_free_r+0x26>
 8007920:	b003      	add	sp, #12
 8007922:	bd30      	pop	{r4, r5, pc}
 8007924:	24000324 	.word	0x24000324

08007928 <sbrk_aligned>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4e0e      	ldr	r6, [pc, #56]	; (8007964 <sbrk_aligned+0x3c>)
 800792c:	460c      	mov	r4, r1
 800792e:	6831      	ldr	r1, [r6, #0]
 8007930:	4605      	mov	r5, r0
 8007932:	b911      	cbnz	r1, 800793a <sbrk_aligned+0x12>
 8007934:	f000 fba6 	bl	8008084 <_sbrk_r>
 8007938:	6030      	str	r0, [r6, #0]
 800793a:	4621      	mov	r1, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f000 fba1 	bl	8008084 <_sbrk_r>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d00a      	beq.n	800795c <sbrk_aligned+0x34>
 8007946:	1cc4      	adds	r4, r0, #3
 8007948:	f024 0403 	bic.w	r4, r4, #3
 800794c:	42a0      	cmp	r0, r4
 800794e:	d007      	beq.n	8007960 <sbrk_aligned+0x38>
 8007950:	1a21      	subs	r1, r4, r0
 8007952:	4628      	mov	r0, r5
 8007954:	f000 fb96 	bl	8008084 <_sbrk_r>
 8007958:	3001      	adds	r0, #1
 800795a:	d101      	bne.n	8007960 <sbrk_aligned+0x38>
 800795c:	f04f 34ff 	mov.w	r4, #4294967295
 8007960:	4620      	mov	r0, r4
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	24000328 	.word	0x24000328

08007968 <_malloc_r>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	1ccd      	adds	r5, r1, #3
 800796e:	f025 0503 	bic.w	r5, r5, #3
 8007972:	3508      	adds	r5, #8
 8007974:	2d0c      	cmp	r5, #12
 8007976:	bf38      	it	cc
 8007978:	250c      	movcc	r5, #12
 800797a:	2d00      	cmp	r5, #0
 800797c:	4607      	mov	r7, r0
 800797e:	db01      	blt.n	8007984 <_malloc_r+0x1c>
 8007980:	42a9      	cmp	r1, r5
 8007982:	d905      	bls.n	8007990 <_malloc_r+0x28>
 8007984:	230c      	movs	r3, #12
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	2600      	movs	r6, #0
 800798a:	4630      	mov	r0, r6
 800798c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a64 <_malloc_r+0xfc>
 8007994:	f000 f868 	bl	8007a68 <__malloc_lock>
 8007998:	f8d8 3000 	ldr.w	r3, [r8]
 800799c:	461c      	mov	r4, r3
 800799e:	bb5c      	cbnz	r4, 80079f8 <_malloc_r+0x90>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4638      	mov	r0, r7
 80079a4:	f7ff ffc0 	bl	8007928 <sbrk_aligned>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	4604      	mov	r4, r0
 80079ac:	d155      	bne.n	8007a5a <_malloc_r+0xf2>
 80079ae:	f8d8 4000 	ldr.w	r4, [r8]
 80079b2:	4626      	mov	r6, r4
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	d145      	bne.n	8007a44 <_malloc_r+0xdc>
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	d048      	beq.n	8007a4e <_malloc_r+0xe6>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	4631      	mov	r1, r6
 80079c0:	4638      	mov	r0, r7
 80079c2:	eb04 0903 	add.w	r9, r4, r3
 80079c6:	f000 fb5d 	bl	8008084 <_sbrk_r>
 80079ca:	4581      	cmp	r9, r0
 80079cc:	d13f      	bne.n	8007a4e <_malloc_r+0xe6>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	1a6d      	subs	r5, r5, r1
 80079d2:	4629      	mov	r1, r5
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ffa7 	bl	8007928 <sbrk_aligned>
 80079da:	3001      	adds	r0, #1
 80079dc:	d037      	beq.n	8007a4e <_malloc_r+0xe6>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	442b      	add	r3, r5
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	f8d8 3000 	ldr.w	r3, [r8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d038      	beq.n	8007a5e <_malloc_r+0xf6>
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	42a2      	cmp	r2, r4
 80079f0:	d12b      	bne.n	8007a4a <_malloc_r+0xe2>
 80079f2:	2200      	movs	r2, #0
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	e00f      	b.n	8007a18 <_malloc_r+0xb0>
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	1b52      	subs	r2, r2, r5
 80079fc:	d41f      	bmi.n	8007a3e <_malloc_r+0xd6>
 80079fe:	2a0b      	cmp	r2, #11
 8007a00:	d917      	bls.n	8007a32 <_malloc_r+0xca>
 8007a02:	1961      	adds	r1, r4, r5
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	6025      	str	r5, [r4, #0]
 8007a08:	bf18      	it	ne
 8007a0a:	6059      	strne	r1, [r3, #4]
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	bf08      	it	eq
 8007a10:	f8c8 1000 	streq.w	r1, [r8]
 8007a14:	5162      	str	r2, [r4, r5]
 8007a16:	604b      	str	r3, [r1, #4]
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f104 060b 	add.w	r6, r4, #11
 8007a1e:	f000 f829 	bl	8007a74 <__malloc_unlock>
 8007a22:	f026 0607 	bic.w	r6, r6, #7
 8007a26:	1d23      	adds	r3, r4, #4
 8007a28:	1af2      	subs	r2, r6, r3
 8007a2a:	d0ae      	beq.n	800798a <_malloc_r+0x22>
 8007a2c:	1b9b      	subs	r3, r3, r6
 8007a2e:	50a3      	str	r3, [r4, r2]
 8007a30:	e7ab      	b.n	800798a <_malloc_r+0x22>
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	6862      	ldr	r2, [r4, #4]
 8007a36:	d1dd      	bne.n	80079f4 <_malloc_r+0x8c>
 8007a38:	f8c8 2000 	str.w	r2, [r8]
 8007a3c:	e7ec      	b.n	8007a18 <_malloc_r+0xb0>
 8007a3e:	4623      	mov	r3, r4
 8007a40:	6864      	ldr	r4, [r4, #4]
 8007a42:	e7ac      	b.n	800799e <_malloc_r+0x36>
 8007a44:	4634      	mov	r4, r6
 8007a46:	6876      	ldr	r6, [r6, #4]
 8007a48:	e7b4      	b.n	80079b4 <_malloc_r+0x4c>
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	e7cc      	b.n	80079e8 <_malloc_r+0x80>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4638      	mov	r0, r7
 8007a54:	f000 f80e 	bl	8007a74 <__malloc_unlock>
 8007a58:	e797      	b.n	800798a <_malloc_r+0x22>
 8007a5a:	6025      	str	r5, [r4, #0]
 8007a5c:	e7dc      	b.n	8007a18 <_malloc_r+0xb0>
 8007a5e:	605b      	str	r3, [r3, #4]
 8007a60:	deff      	udf	#255	; 0xff
 8007a62:	bf00      	nop
 8007a64:	24000324 	.word	0x24000324

08007a68 <__malloc_lock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__malloc_lock+0x8>)
 8007a6a:	f7ff bf0f 	b.w	800788c <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	24000320 	.word	0x24000320

08007a74 <__malloc_unlock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_unlock+0x8>)
 8007a76:	f7ff bf0a 	b.w	800788e <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	24000320 	.word	0x24000320

08007a80 <__ssputs_r>:
 8007a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a84:	688e      	ldr	r6, [r1, #8]
 8007a86:	461f      	mov	r7, r3
 8007a88:	42be      	cmp	r6, r7
 8007a8a:	680b      	ldr	r3, [r1, #0]
 8007a8c:	4682      	mov	sl, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4690      	mov	r8, r2
 8007a92:	d82c      	bhi.n	8007aee <__ssputs_r+0x6e>
 8007a94:	898a      	ldrh	r2, [r1, #12]
 8007a96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a9a:	d026      	beq.n	8007aea <__ssputs_r+0x6a>
 8007a9c:	6965      	ldr	r5, [r4, #20]
 8007a9e:	6909      	ldr	r1, [r1, #16]
 8007aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa4:	eba3 0901 	sub.w	r9, r3, r1
 8007aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aac:	1c7b      	adds	r3, r7, #1
 8007aae:	444b      	add	r3, r9
 8007ab0:	106d      	asrs	r5, r5, #1
 8007ab2:	429d      	cmp	r5, r3
 8007ab4:	bf38      	it	cc
 8007ab6:	461d      	movcc	r5, r3
 8007ab8:	0553      	lsls	r3, r2, #21
 8007aba:	d527      	bpl.n	8007b0c <__ssputs_r+0x8c>
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7ff ff53 	bl	8007968 <_malloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	b360      	cbz	r0, 8007b20 <__ssputs_r+0xa0>
 8007ac6:	6921      	ldr	r1, [r4, #16]
 8007ac8:	464a      	mov	r2, r9
 8007aca:	f000 faeb 	bl	80080a4 <memcpy>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	6126      	str	r6, [r4, #16]
 8007adc:	6165      	str	r5, [r4, #20]
 8007ade:	444e      	add	r6, r9
 8007ae0:	eba5 0509 	sub.w	r5, r5, r9
 8007ae4:	6026      	str	r6, [r4, #0]
 8007ae6:	60a5      	str	r5, [r4, #8]
 8007ae8:	463e      	mov	r6, r7
 8007aea:	42be      	cmp	r6, r7
 8007aec:	d900      	bls.n	8007af0 <__ssputs_r+0x70>
 8007aee:	463e      	mov	r6, r7
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	4632      	mov	r2, r6
 8007af4:	4641      	mov	r1, r8
 8007af6:	f000 faab 	bl	8008050 <memmove>
 8007afa:	68a3      	ldr	r3, [r4, #8]
 8007afc:	1b9b      	subs	r3, r3, r6
 8007afe:	60a3      	str	r3, [r4, #8]
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	4433      	add	r3, r6
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	2000      	movs	r0, #0
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	f000 fad7 	bl	80080c0 <_realloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1e0      	bne.n	8007ada <__ssputs_r+0x5a>
 8007b18:	6921      	ldr	r1, [r4, #16]
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f7ff feb8 	bl	8007890 <_free_r>
 8007b20:	230c      	movs	r3, #12
 8007b22:	f8ca 3000 	str.w	r3, [sl]
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	e7e9      	b.n	8007b08 <__ssputs_r+0x88>

08007b34 <_svfiprintf_r>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	4698      	mov	r8, r3
 8007b3a:	898b      	ldrh	r3, [r1, #12]
 8007b3c:	061b      	lsls	r3, r3, #24
 8007b3e:	b09d      	sub	sp, #116	; 0x74
 8007b40:	4607      	mov	r7, r0
 8007b42:	460d      	mov	r5, r1
 8007b44:	4614      	mov	r4, r2
 8007b46:	d50e      	bpl.n	8007b66 <_svfiprintf_r+0x32>
 8007b48:	690b      	ldr	r3, [r1, #16]
 8007b4a:	b963      	cbnz	r3, 8007b66 <_svfiprintf_r+0x32>
 8007b4c:	2140      	movs	r1, #64	; 0x40
 8007b4e:	f7ff ff0b 	bl	8007968 <_malloc_r>
 8007b52:	6028      	str	r0, [r5, #0]
 8007b54:	6128      	str	r0, [r5, #16]
 8007b56:	b920      	cbnz	r0, 8007b62 <_svfiprintf_r+0x2e>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e0d0      	b.n	8007d04 <_svfiprintf_r+0x1d0>
 8007b62:	2340      	movs	r3, #64	; 0x40
 8007b64:	616b      	str	r3, [r5, #20]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6a:	2320      	movs	r3, #32
 8007b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b74:	2330      	movs	r3, #48	; 0x30
 8007b76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d1c <_svfiprintf_r+0x1e8>
 8007b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b7e:	f04f 0901 	mov.w	r9, #1
 8007b82:	4623      	mov	r3, r4
 8007b84:	469a      	mov	sl, r3
 8007b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8a:	b10a      	cbz	r2, 8007b90 <_svfiprintf_r+0x5c>
 8007b8c:	2a25      	cmp	r2, #37	; 0x25
 8007b8e:	d1f9      	bne.n	8007b84 <_svfiprintf_r+0x50>
 8007b90:	ebba 0b04 	subs.w	fp, sl, r4
 8007b94:	d00b      	beq.n	8007bae <_svfiprintf_r+0x7a>
 8007b96:	465b      	mov	r3, fp
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff ff6f 	bl	8007a80 <__ssputs_r>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f000 80a9 	beq.w	8007cfa <_svfiprintf_r+0x1c6>
 8007ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007baa:	445a      	add	r2, fp
 8007bac:	9209      	str	r2, [sp, #36]	; 0x24
 8007bae:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80a1 	beq.w	8007cfa <_svfiprintf_r+0x1c6>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc2:	f10a 0a01 	add.w	sl, sl, #1
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bce:	931a      	str	r3, [sp, #104]	; 0x68
 8007bd0:	4654      	mov	r4, sl
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	4850      	ldr	r0, [pc, #320]	; (8007d1c <_svfiprintf_r+0x1e8>)
 8007bda:	f7f8 fb89 	bl	80002f0 <memchr>
 8007bde:	9a04      	ldr	r2, [sp, #16]
 8007be0:	b9d8      	cbnz	r0, 8007c1a <_svfiprintf_r+0xe6>
 8007be2:	06d0      	lsls	r0, r2, #27
 8007be4:	bf44      	itt	mi
 8007be6:	2320      	movmi	r3, #32
 8007be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bec:	0711      	lsls	r1, r2, #28
 8007bee:	bf44      	itt	mi
 8007bf0:	232b      	movmi	r3, #43	; 0x2b
 8007bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfc:	d015      	beq.n	8007c2a <_svfiprintf_r+0xf6>
 8007bfe:	9a07      	ldr	r2, [sp, #28]
 8007c00:	4654      	mov	r4, sl
 8007c02:	2000      	movs	r0, #0
 8007c04:	f04f 0c0a 	mov.w	ip, #10
 8007c08:	4621      	mov	r1, r4
 8007c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0e:	3b30      	subs	r3, #48	; 0x30
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d94d      	bls.n	8007cb0 <_svfiprintf_r+0x17c>
 8007c14:	b1b0      	cbz	r0, 8007c44 <_svfiprintf_r+0x110>
 8007c16:	9207      	str	r2, [sp, #28]
 8007c18:	e014      	b.n	8007c44 <_svfiprintf_r+0x110>
 8007c1a:	eba0 0308 	sub.w	r3, r0, r8
 8007c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	46a2      	mov	sl, r4
 8007c28:	e7d2      	b.n	8007bd0 <_svfiprintf_r+0x9c>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	1d19      	adds	r1, r3, #4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	9103      	str	r1, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfbb      	ittet	lt
 8007c36:	425b      	neglt	r3, r3
 8007c38:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3c:	9307      	strge	r3, [sp, #28]
 8007c3e:	9307      	strlt	r3, [sp, #28]
 8007c40:	bfb8      	it	lt
 8007c42:	9204      	strlt	r2, [sp, #16]
 8007c44:	7823      	ldrb	r3, [r4, #0]
 8007c46:	2b2e      	cmp	r3, #46	; 0x2e
 8007c48:	d10c      	bne.n	8007c64 <_svfiprintf_r+0x130>
 8007c4a:	7863      	ldrb	r3, [r4, #1]
 8007c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4e:	d134      	bne.n	8007cba <_svfiprintf_r+0x186>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	9203      	str	r2, [sp, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bfb8      	it	lt
 8007c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c60:	3402      	adds	r4, #2
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d2c <_svfiprintf_r+0x1f8>
 8007c68:	7821      	ldrb	r1, [r4, #0]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	f7f8 fb3f 	bl	80002f0 <memchr>
 8007c72:	b138      	cbz	r0, 8007c84 <_svfiprintf_r+0x150>
 8007c74:	9b04      	ldr	r3, [sp, #16]
 8007c76:	eba0 000a 	sub.w	r0, r0, sl
 8007c7a:	2240      	movs	r2, #64	; 0x40
 8007c7c:	4082      	lsls	r2, r0
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	3401      	adds	r4, #1
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c88:	4825      	ldr	r0, [pc, #148]	; (8007d20 <_svfiprintf_r+0x1ec>)
 8007c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c8e:	2206      	movs	r2, #6
 8007c90:	f7f8 fb2e 	bl	80002f0 <memchr>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d038      	beq.n	8007d0a <_svfiprintf_r+0x1d6>
 8007c98:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <_svfiprintf_r+0x1f0>)
 8007c9a:	bb1b      	cbnz	r3, 8007ce4 <_svfiprintf_r+0x1b0>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	3307      	adds	r3, #7
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	4433      	add	r3, r6
 8007cac:	9309      	str	r3, [sp, #36]	; 0x24
 8007cae:	e768      	b.n	8007b82 <_svfiprintf_r+0x4e>
 8007cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	e7a6      	b.n	8007c08 <_svfiprintf_r+0xd4>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	3401      	adds	r4, #1
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f04f 0c0a 	mov.w	ip, #10
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ccc:	3a30      	subs	r2, #48	; 0x30
 8007cce:	2a09      	cmp	r2, #9
 8007cd0:	d903      	bls.n	8007cda <_svfiprintf_r+0x1a6>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c6      	beq.n	8007c64 <_svfiprintf_r+0x130>
 8007cd6:	9105      	str	r1, [sp, #20]
 8007cd8:	e7c4      	b.n	8007c64 <_svfiprintf_r+0x130>
 8007cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cde:	4604      	mov	r4, r0
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e7f0      	b.n	8007cc6 <_svfiprintf_r+0x192>
 8007ce4:	ab03      	add	r3, sp, #12
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	462a      	mov	r2, r5
 8007cea:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <_svfiprintf_r+0x1f4>)
 8007cec:	a904      	add	r1, sp, #16
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f3af 8000 	nop.w
 8007cf4:	1c42      	adds	r2, r0, #1
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	d1d6      	bne.n	8007ca8 <_svfiprintf_r+0x174>
 8007cfa:	89ab      	ldrh	r3, [r5, #12]
 8007cfc:	065b      	lsls	r3, r3, #25
 8007cfe:	f53f af2d 	bmi.w	8007b5c <_svfiprintf_r+0x28>
 8007d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d04:	b01d      	add	sp, #116	; 0x74
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <_svfiprintf_r+0x1f4>)
 8007d12:	a904      	add	r1, sp, #16
 8007d14:	4638      	mov	r0, r7
 8007d16:	f000 f879 	bl	8007e0c <_printf_i>
 8007d1a:	e7eb      	b.n	8007cf4 <_svfiprintf_r+0x1c0>
 8007d1c:	08008188 	.word	0x08008188
 8007d20:	08008192 	.word	0x08008192
 8007d24:	00000000 	.word	0x00000000
 8007d28:	08007a81 	.word	0x08007a81
 8007d2c:	0800818e 	.word	0x0800818e

08007d30 <_printf_common>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	4616      	mov	r6, r2
 8007d36:	4699      	mov	r9, r3
 8007d38:	688a      	ldr	r2, [r1, #8]
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d40:	4293      	cmp	r3, r2
 8007d42:	bfb8      	it	lt
 8007d44:	4613      	movlt	r3, r2
 8007d46:	6033      	str	r3, [r6, #0]
 8007d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	b10a      	cbz	r2, 8007d56 <_printf_common+0x26>
 8007d52:	3301      	adds	r3, #1
 8007d54:	6033      	str	r3, [r6, #0]
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	0699      	lsls	r1, r3, #26
 8007d5a:	bf42      	ittt	mi
 8007d5c:	6833      	ldrmi	r3, [r6, #0]
 8007d5e:	3302      	addmi	r3, #2
 8007d60:	6033      	strmi	r3, [r6, #0]
 8007d62:	6825      	ldr	r5, [r4, #0]
 8007d64:	f015 0506 	ands.w	r5, r5, #6
 8007d68:	d106      	bne.n	8007d78 <_printf_common+0x48>
 8007d6a:	f104 0a19 	add.w	sl, r4, #25
 8007d6e:	68e3      	ldr	r3, [r4, #12]
 8007d70:	6832      	ldr	r2, [r6, #0]
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	dc26      	bgt.n	8007dc6 <_printf_common+0x96>
 8007d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d7c:	1e13      	subs	r3, r2, #0
 8007d7e:	6822      	ldr	r2, [r4, #0]
 8007d80:	bf18      	it	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	0692      	lsls	r2, r2, #26
 8007d86:	d42b      	bmi.n	8007de0 <_printf_common+0xb0>
 8007d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c0      	blx	r8
 8007d92:	3001      	adds	r0, #1
 8007d94:	d01e      	beq.n	8007dd4 <_printf_common+0xa4>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	f003 0306 	and.w	r3, r3, #6
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	bf02      	ittt	eq
 8007da2:	68e5      	ldreq	r5, [r4, #12]
 8007da4:	6833      	ldreq	r3, [r6, #0]
 8007da6:	1aed      	subeq	r5, r5, r3
 8007da8:	68a3      	ldr	r3, [r4, #8]
 8007daa:	bf0c      	ite	eq
 8007dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007db0:	2500      	movne	r5, #0
 8007db2:	4293      	cmp	r3, r2
 8007db4:	bfc4      	itt	gt
 8007db6:	1a9b      	subgt	r3, r3, r2
 8007db8:	18ed      	addgt	r5, r5, r3
 8007dba:	2600      	movs	r6, #0
 8007dbc:	341a      	adds	r4, #26
 8007dbe:	42b5      	cmp	r5, r6
 8007dc0:	d11a      	bne.n	8007df8 <_printf_common+0xc8>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e008      	b.n	8007dd8 <_printf_common+0xa8>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4652      	mov	r2, sl
 8007dca:	4649      	mov	r1, r9
 8007dcc:	4638      	mov	r0, r7
 8007dce:	47c0      	blx	r8
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d103      	bne.n	8007ddc <_printf_common+0xac>
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ddc:	3501      	adds	r5, #1
 8007dde:	e7c6      	b.n	8007d6e <_printf_common+0x3e>
 8007de0:	18e1      	adds	r1, r4, r3
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	2030      	movs	r0, #48	; 0x30
 8007de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dea:	4422      	add	r2, r4
 8007dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df4:	3302      	adds	r3, #2
 8007df6:	e7c7      	b.n	8007d88 <_printf_common+0x58>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4638      	mov	r0, r7
 8007e00:	47c0      	blx	r8
 8007e02:	3001      	adds	r0, #1
 8007e04:	d0e6      	beq.n	8007dd4 <_printf_common+0xa4>
 8007e06:	3601      	adds	r6, #1
 8007e08:	e7d9      	b.n	8007dbe <_printf_common+0x8e>
	...

08007e0c <_printf_i>:
 8007e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	7e0f      	ldrb	r7, [r1, #24]
 8007e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e14:	2f78      	cmp	r7, #120	; 0x78
 8007e16:	4691      	mov	r9, r2
 8007e18:	4680      	mov	r8, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	469a      	mov	sl, r3
 8007e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e22:	d807      	bhi.n	8007e34 <_printf_i+0x28>
 8007e24:	2f62      	cmp	r7, #98	; 0x62
 8007e26:	d80a      	bhi.n	8007e3e <_printf_i+0x32>
 8007e28:	2f00      	cmp	r7, #0
 8007e2a:	f000 80d4 	beq.w	8007fd6 <_printf_i+0x1ca>
 8007e2e:	2f58      	cmp	r7, #88	; 0x58
 8007e30:	f000 80c0 	beq.w	8007fb4 <_printf_i+0x1a8>
 8007e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e3c:	e03a      	b.n	8007eb4 <_printf_i+0xa8>
 8007e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e42:	2b15      	cmp	r3, #21
 8007e44:	d8f6      	bhi.n	8007e34 <_printf_i+0x28>
 8007e46:	a101      	add	r1, pc, #4	; (adr r1, 8007e4c <_printf_i+0x40>)
 8007e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e4c:	08007ea5 	.word	0x08007ea5
 8007e50:	08007eb9 	.word	0x08007eb9
 8007e54:	08007e35 	.word	0x08007e35
 8007e58:	08007e35 	.word	0x08007e35
 8007e5c:	08007e35 	.word	0x08007e35
 8007e60:	08007e35 	.word	0x08007e35
 8007e64:	08007eb9 	.word	0x08007eb9
 8007e68:	08007e35 	.word	0x08007e35
 8007e6c:	08007e35 	.word	0x08007e35
 8007e70:	08007e35 	.word	0x08007e35
 8007e74:	08007e35 	.word	0x08007e35
 8007e78:	08007fbd 	.word	0x08007fbd
 8007e7c:	08007ee5 	.word	0x08007ee5
 8007e80:	08007f77 	.word	0x08007f77
 8007e84:	08007e35 	.word	0x08007e35
 8007e88:	08007e35 	.word	0x08007e35
 8007e8c:	08007fdf 	.word	0x08007fdf
 8007e90:	08007e35 	.word	0x08007e35
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	08007e35 	.word	0x08007e35
 8007e9c:	08007e35 	.word	0x08007e35
 8007ea0:	08007f7f 	.word	0x08007f7f
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	1d1a      	adds	r2, r3, #4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	602a      	str	r2, [r5, #0]
 8007eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e09f      	b.n	8007ff8 <_printf_i+0x1ec>
 8007eb8:	6820      	ldr	r0, [r4, #0]
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	0607      	lsls	r7, r0, #24
 8007ebe:	f103 0104 	add.w	r1, r3, #4
 8007ec2:	6029      	str	r1, [r5, #0]
 8007ec4:	d501      	bpl.n	8007eca <_printf_i+0xbe>
 8007ec6:	681e      	ldr	r6, [r3, #0]
 8007ec8:	e003      	b.n	8007ed2 <_printf_i+0xc6>
 8007eca:	0646      	lsls	r6, r0, #25
 8007ecc:	d5fb      	bpl.n	8007ec6 <_printf_i+0xba>
 8007ece:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	da03      	bge.n	8007ede <_printf_i+0xd2>
 8007ed6:	232d      	movs	r3, #45	; 0x2d
 8007ed8:	4276      	negs	r6, r6
 8007eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ede:	485a      	ldr	r0, [pc, #360]	; (8008048 <_printf_i+0x23c>)
 8007ee0:	230a      	movs	r3, #10
 8007ee2:	e012      	b.n	8007f0a <_printf_i+0xfe>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	1d19      	adds	r1, r3, #4
 8007eea:	6029      	str	r1, [r5, #0]
 8007eec:	0605      	lsls	r5, r0, #24
 8007eee:	d501      	bpl.n	8007ef4 <_printf_i+0xe8>
 8007ef0:	681e      	ldr	r6, [r3, #0]
 8007ef2:	e002      	b.n	8007efa <_printf_i+0xee>
 8007ef4:	0641      	lsls	r1, r0, #25
 8007ef6:	d5fb      	bpl.n	8007ef0 <_printf_i+0xe4>
 8007ef8:	881e      	ldrh	r6, [r3, #0]
 8007efa:	4853      	ldr	r0, [pc, #332]	; (8008048 <_printf_i+0x23c>)
 8007efc:	2f6f      	cmp	r7, #111	; 0x6f
 8007efe:	bf0c      	ite	eq
 8007f00:	2308      	moveq	r3, #8
 8007f02:	230a      	movne	r3, #10
 8007f04:	2100      	movs	r1, #0
 8007f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f0a:	6865      	ldr	r5, [r4, #4]
 8007f0c:	60a5      	str	r5, [r4, #8]
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	bfa2      	ittt	ge
 8007f12:	6821      	ldrge	r1, [r4, #0]
 8007f14:	f021 0104 	bicge.w	r1, r1, #4
 8007f18:	6021      	strge	r1, [r4, #0]
 8007f1a:	b90e      	cbnz	r6, 8007f20 <_printf_i+0x114>
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	d04b      	beq.n	8007fb8 <_printf_i+0x1ac>
 8007f20:	4615      	mov	r5, r2
 8007f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f26:	fb03 6711 	mls	r7, r3, r1, r6
 8007f2a:	5dc7      	ldrb	r7, [r0, r7]
 8007f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f30:	4637      	mov	r7, r6
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	460e      	mov	r6, r1
 8007f36:	d9f4      	bls.n	8007f22 <_printf_i+0x116>
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d10b      	bne.n	8007f54 <_printf_i+0x148>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	07de      	lsls	r6, r3, #31
 8007f40:	d508      	bpl.n	8007f54 <_printf_i+0x148>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4299      	cmp	r1, r3
 8007f48:	bfde      	ittt	le
 8007f4a:	2330      	movle	r3, #48	; 0x30
 8007f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	6122      	str	r2, [r4, #16]
 8007f58:	f8cd a000 	str.w	sl, [sp]
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	aa03      	add	r2, sp, #12
 8007f60:	4621      	mov	r1, r4
 8007f62:	4640      	mov	r0, r8
 8007f64:	f7ff fee4 	bl	8007d30 <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d14a      	bne.n	8008002 <_printf_i+0x1f6>
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	b004      	add	sp, #16
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f043 0320 	orr.w	r3, r3, #32
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	4833      	ldr	r0, [pc, #204]	; (800804c <_printf_i+0x240>)
 8007f80:	2778      	movs	r7, #120	; 0x78
 8007f82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	6829      	ldr	r1, [r5, #0]
 8007f8a:	061f      	lsls	r7, r3, #24
 8007f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f90:	d402      	bmi.n	8007f98 <_printf_i+0x18c>
 8007f92:	065f      	lsls	r7, r3, #25
 8007f94:	bf48      	it	mi
 8007f96:	b2b6      	uxthmi	r6, r6
 8007f98:	07df      	lsls	r7, r3, #31
 8007f9a:	bf48      	it	mi
 8007f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007fa0:	6029      	str	r1, [r5, #0]
 8007fa2:	bf48      	it	mi
 8007fa4:	6023      	strmi	r3, [r4, #0]
 8007fa6:	b91e      	cbnz	r6, 8007fb0 <_printf_i+0x1a4>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	f023 0320 	bic.w	r3, r3, #32
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	e7a7      	b.n	8007f04 <_printf_i+0xf8>
 8007fb4:	4824      	ldr	r0, [pc, #144]	; (8008048 <_printf_i+0x23c>)
 8007fb6:	e7e4      	b.n	8007f82 <_printf_i+0x176>
 8007fb8:	4615      	mov	r5, r2
 8007fba:	e7bd      	b.n	8007f38 <_printf_i+0x12c>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	6826      	ldr	r6, [r4, #0]
 8007fc0:	6961      	ldr	r1, [r4, #20]
 8007fc2:	1d18      	adds	r0, r3, #4
 8007fc4:	6028      	str	r0, [r5, #0]
 8007fc6:	0635      	lsls	r5, r6, #24
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	d501      	bpl.n	8007fd0 <_printf_i+0x1c4>
 8007fcc:	6019      	str	r1, [r3, #0]
 8007fce:	e002      	b.n	8007fd6 <_printf_i+0x1ca>
 8007fd0:	0670      	lsls	r0, r6, #25
 8007fd2:	d5fb      	bpl.n	8007fcc <_printf_i+0x1c0>
 8007fd4:	8019      	strh	r1, [r3, #0]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6123      	str	r3, [r4, #16]
 8007fda:	4615      	mov	r5, r2
 8007fdc:	e7bc      	b.n	8007f58 <_printf_i+0x14c>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	1d1a      	adds	r2, r3, #4
 8007fe2:	602a      	str	r2, [r5, #0]
 8007fe4:	681d      	ldr	r5, [r3, #0]
 8007fe6:	6862      	ldr	r2, [r4, #4]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4628      	mov	r0, r5
 8007fec:	f7f8 f980 	bl	80002f0 <memchr>
 8007ff0:	b108      	cbz	r0, 8007ff6 <_printf_i+0x1ea>
 8007ff2:	1b40      	subs	r0, r0, r5
 8007ff4:	6060      	str	r0, [r4, #4]
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	6123      	str	r3, [r4, #16]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008000:	e7aa      	b.n	8007f58 <_printf_i+0x14c>
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	462a      	mov	r2, r5
 8008006:	4649      	mov	r1, r9
 8008008:	4640      	mov	r0, r8
 800800a:	47d0      	blx	sl
 800800c:	3001      	adds	r0, #1
 800800e:	d0ad      	beq.n	8007f6c <_printf_i+0x160>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	079b      	lsls	r3, r3, #30
 8008014:	d413      	bmi.n	800803e <_printf_i+0x232>
 8008016:	68e0      	ldr	r0, [r4, #12]
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	4298      	cmp	r0, r3
 800801c:	bfb8      	it	lt
 800801e:	4618      	movlt	r0, r3
 8008020:	e7a6      	b.n	8007f70 <_printf_i+0x164>
 8008022:	2301      	movs	r3, #1
 8008024:	4632      	mov	r2, r6
 8008026:	4649      	mov	r1, r9
 8008028:	4640      	mov	r0, r8
 800802a:	47d0      	blx	sl
 800802c:	3001      	adds	r0, #1
 800802e:	d09d      	beq.n	8007f6c <_printf_i+0x160>
 8008030:	3501      	adds	r5, #1
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	9903      	ldr	r1, [sp, #12]
 8008036:	1a5b      	subs	r3, r3, r1
 8008038:	42ab      	cmp	r3, r5
 800803a:	dcf2      	bgt.n	8008022 <_printf_i+0x216>
 800803c:	e7eb      	b.n	8008016 <_printf_i+0x20a>
 800803e:	2500      	movs	r5, #0
 8008040:	f104 0619 	add.w	r6, r4, #25
 8008044:	e7f5      	b.n	8008032 <_printf_i+0x226>
 8008046:	bf00      	nop
 8008048:	08008199 	.word	0x08008199
 800804c:	080081aa 	.word	0x080081aa

08008050 <memmove>:
 8008050:	4288      	cmp	r0, r1
 8008052:	b510      	push	{r4, lr}
 8008054:	eb01 0402 	add.w	r4, r1, r2
 8008058:	d902      	bls.n	8008060 <memmove+0x10>
 800805a:	4284      	cmp	r4, r0
 800805c:	4623      	mov	r3, r4
 800805e:	d807      	bhi.n	8008070 <memmove+0x20>
 8008060:	1e43      	subs	r3, r0, #1
 8008062:	42a1      	cmp	r1, r4
 8008064:	d008      	beq.n	8008078 <memmove+0x28>
 8008066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800806e:	e7f8      	b.n	8008062 <memmove+0x12>
 8008070:	4402      	add	r2, r0
 8008072:	4601      	mov	r1, r0
 8008074:	428a      	cmp	r2, r1
 8008076:	d100      	bne.n	800807a <memmove+0x2a>
 8008078:	bd10      	pop	{r4, pc}
 800807a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800807e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008082:	e7f7      	b.n	8008074 <memmove+0x24>

08008084 <_sbrk_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_sbrk_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f8 ff8e 	bl	8000fb0 <_sbrk>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_sbrk_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_sbrk_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	2400031c 	.word	0x2400031c

080080a4 <memcpy>:
 80080a4:	440a      	add	r2, r1
 80080a6:	4291      	cmp	r1, r2
 80080a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080ac:	d100      	bne.n	80080b0 <memcpy+0xc>
 80080ae:	4770      	bx	lr
 80080b0:	b510      	push	{r4, lr}
 80080b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ba:	4291      	cmp	r1, r2
 80080bc:	d1f9      	bne.n	80080b2 <memcpy+0xe>
 80080be:	bd10      	pop	{r4, pc}

080080c0 <_realloc_r>:
 80080c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c4:	4680      	mov	r8, r0
 80080c6:	4614      	mov	r4, r2
 80080c8:	460e      	mov	r6, r1
 80080ca:	b921      	cbnz	r1, 80080d6 <_realloc_r+0x16>
 80080cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d0:	4611      	mov	r1, r2
 80080d2:	f7ff bc49 	b.w	8007968 <_malloc_r>
 80080d6:	b92a      	cbnz	r2, 80080e4 <_realloc_r+0x24>
 80080d8:	f7ff fbda 	bl	8007890 <_free_r>
 80080dc:	4625      	mov	r5, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e4:	f000 f81b 	bl	800811e <_malloc_usable_size_r>
 80080e8:	4284      	cmp	r4, r0
 80080ea:	4607      	mov	r7, r0
 80080ec:	d802      	bhi.n	80080f4 <_realloc_r+0x34>
 80080ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080f2:	d812      	bhi.n	800811a <_realloc_r+0x5a>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4640      	mov	r0, r8
 80080f8:	f7ff fc36 	bl	8007968 <_malloc_r>
 80080fc:	4605      	mov	r5, r0
 80080fe:	2800      	cmp	r0, #0
 8008100:	d0ed      	beq.n	80080de <_realloc_r+0x1e>
 8008102:	42bc      	cmp	r4, r7
 8008104:	4622      	mov	r2, r4
 8008106:	4631      	mov	r1, r6
 8008108:	bf28      	it	cs
 800810a:	463a      	movcs	r2, r7
 800810c:	f7ff ffca 	bl	80080a4 <memcpy>
 8008110:	4631      	mov	r1, r6
 8008112:	4640      	mov	r0, r8
 8008114:	f7ff fbbc 	bl	8007890 <_free_r>
 8008118:	e7e1      	b.n	80080de <_realloc_r+0x1e>
 800811a:	4635      	mov	r5, r6
 800811c:	e7df      	b.n	80080de <_realloc_r+0x1e>

0800811e <_malloc_usable_size_r>:
 800811e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008122:	1f18      	subs	r0, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfbc      	itt	lt
 8008128:	580b      	ldrlt	r3, [r1, r0]
 800812a:	18c0      	addlt	r0, r0, r3
 800812c:	4770      	bx	lr
	...

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
